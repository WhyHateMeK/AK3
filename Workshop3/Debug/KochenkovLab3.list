
KochenkovLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08005670  08005670  00006670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005a04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000071d4  2**0
                  CONTENTS
 10 .bss          000001c4  200001d4  200001d4  000071d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  000071d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a25  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c3  00000000  00000000  0000dc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  0000f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b7  00000000  00000000  0000fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d3b  00000000  00000000  0000ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008072  00000000  00000000  00031c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cebd0  00000000  00000000  00039cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108894  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002844  00000000  00000000  001088d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0010b11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005658 	.word	0x08005658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005658 	.word	0x08005658

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HAL_ADC_ConvCpltCallback>:
#define ADC_READINGS_COUNT 100 // Визначаємо кількість зчитувань
volatile uint16_t adcAverage = 0; // Для зберігання середнього значення
volatile float voltage = 0.0f; // Для зберігання напруги

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    uint32_t adcValue;

    if(hadc->Instance == ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d155      	bne.n	8000f92 <HAL_ADC_ConvCpltCallback+0xbe>
    {
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000ee6:	482e      	ldr	r0, [pc, #184]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000ee8:	f000 fdfe 	bl	8001ae8 <HAL_ADC_GetValue>
 8000eec:	60f8      	str	r0, [r7, #12]

        // Додаємо значення до суми та збільшуємо лічильник
        adcSum += adcValue;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000ef8:	6013      	str	r3, [r2, #0]
        adcCount++;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000f06:	801a      	strh	r2, [r3, #0]

        // Перевіряємо, чи досягли ми необхідної кількості зчитувань
        if (adcCount >= ADC_READINGS_COUNT)
 8000f08:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b63      	cmp	r3, #99	@ 0x63
 8000f10:	d93c      	bls.n	8000f8c <HAL_ADC_ConvCpltCallback+0xb8>
        {
            // Обчислюємо середнє значення
            adcAverage = adcSum / ADC_READINGS_COUNT;
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a25      	ldr	r2, [pc, #148]	@ (8000fac <HAL_ADC_ConvCpltCallback+0xd8>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	095b      	lsrs	r3, r3, #5
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f22:	801a      	strh	r2, [r3, #0]

            // Обчислюємо напругу
            voltage = (float)adcAverage * (3.3f / 4095.0f);
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f32:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000fb4 <HAL_ADC_ConvCpltCallback+0xe0>
 8000f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f3c:	edc3 7a00 	vstr	s15, [r3]

            if (adcAverage < 2048) // Використовуємо середнє значення для логіки GPIO
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f4a:	d20c      	bcs.n	8000f66 <HAL_ADC_ConvCpltCallback+0x92>
            {
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f52:	481a      	ldr	r0, [pc, #104]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f54:	f001 fac0 	bl	80024d8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5e:	4817      	ldr	r0, [pc, #92]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f60:	f001 faba 	bl	80024d8 <HAL_GPIO_WritePin>
 8000f64:	e00b      	b.n	8000f7e <HAL_ADC_ConvCpltCallback+0xaa>
            }
            else
            {
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f6c:	4813      	ldr	r0, [pc, #76]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f6e:	f001 fab3 	bl	80024d8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f78:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f7a:	f001 faad 	bl	80024d8 <HAL_GPIO_WritePin>
            }

            // Скидаємо лічильник і суму для наступного циклу зчитувань
            adcSum = 0;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
            adcCount = 0;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	801a      	strh	r2, [r3, #0]
        else
        {
            HAL_ADC_Start_IT(&hadc1);
        }
    }
}
 8000f8a:	e002      	b.n	8000f92 <HAL_ADC_ConvCpltCallback+0xbe>
            HAL_ADC_Start_IT(&hadc1);
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000f8e:	f000 fbbd 	bl	800170c <HAL_ADC_Start_IT>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	200001f0 	.word	0x200001f0
 8000fa4:	20000238 	.word	0x20000238
 8000fa8:	2000023c 	.word	0x2000023c
 8000fac:	51eb851f 	.word	0x51eb851f
 8000fb0:	2000023e 	.word	0x2000023e
 8000fb4:	3a534067 	.word	0x3a534067
 8000fb8:	20000240 	.word	0x20000240
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc4:	f000 fac8 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 f81c 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f000 f8ca 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fd0:	f000 f876 	bl	80010c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000fd4:	480a      	ldr	r0, [pc, #40]	@ (8001000 <main+0x40>)
 8000fd6:	f000 fb99 	bl	800170c <HAL_ADC_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fde:	f000 fb2d 	bl	800163c <HAL_Delay>
	  HAL_Delay(500);
 8000fe2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fe6:	f000 fb29 	bl	800163c <HAL_Delay>
	  HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fee:	f000 fb25 	bl	800163c <HAL_Delay>
	  HAL_Delay(500);
 8000ff2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff6:	f000 fb21 	bl	800163c <HAL_Delay>
	  HAL_Delay(500);
 8000ffa:	bf00      	nop
 8000ffc:	e7ed      	b.n	8000fda <main+0x1a>
 8000ffe:	bf00      	nop
 8001000:	200001f0 	.word	0x200001f0

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	@ 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	@ 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fbf9 	bl	800380a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <SystemClock_Config+0xb4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <SystemClock_Config+0xb4>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <SystemClock_Config+0xb4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <SystemClock_Config+0xb8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <SystemClock_Config+0xb8>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <SystemClock_Config+0xb8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fa49 	bl	800250c <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001080:	f000 f8b4 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fcac 	bl	80029fc <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010aa:	f000 f89f 	bl	80011ec <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	@ 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	@ (800115c <MX_ADC1_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <MX_ADC1_Init+0xa0>)
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_ADC1_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_ADC1_Init+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001122:	f000 faaf 	bl	8001684 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 f85e 	bl	80011ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001130:	2303      	movs	r3, #3
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001138:	2307      	movs	r3, #7
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001142:	f000 fcf3 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800114c:	f000 f84e 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001f0 	.word	0x200001f0
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_GPIO_Init+0x80>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <MX_GPIO_Init+0x80>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_GPIO_Init+0x80>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_GPIO_Init+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <MX_GPIO_Init+0x80>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_GPIO_Init+0x80>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <MX_GPIO_Init+0x84>)
 80011ba:	f001 f98d 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80011be:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_GPIO_Init+0x84>)
 80011d8:	f000 ffe2 	bl	80021a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020c00 	.word	0x40020c00

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <Error_Handler+0x8>

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	@ (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	@ (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	@ 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <HAL_ADC_MspInit+0x8c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12f      	bne.n	80012ca <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <HAL_ADC_MspInit+0x90>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <HAL_ADC_MspInit+0x90>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <HAL_ADC_MspInit+0x90>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_ADC_MspInit+0x90>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <HAL_ADC_MspInit+0x90>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_ADC_MspInit+0x90>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a2:	2308      	movs	r3, #8
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <HAL_ADC_MspInit+0x94>)
 80012b6:	f000 ff73 	bl	80021a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2012      	movs	r0, #18
 80012c0:	f000 ff37 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012c4:	2012      	movs	r0, #18
 80012c6:	f000 ff50 	bl	800216a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40012000 	.word	0x40012000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f961 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <ADC_IRQHandler+0x10>)
 8001346:	f000 fabf 	bl	80018c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001f0 	.word	0x200001f0

08001354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_kill>:

int _kill(int pid, int sig)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136e:	f002 fa9f 	bl	80038b0 <__errno>
 8001372:	4603      	mov	r3, r0
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_exit>:

void _exit (int status)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001396:	bf00      	nop
 8001398:	e7fd      	b.n	8001396 <_exit+0x12>

0800139a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e00a      	b.n	80013c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ac:	f3af 8000 	nop.w
 80013b0:	4601      	mov	r1, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	b2ca      	uxtb	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf0      	blt.n	80013ac <_read+0x12>
  }

  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e009      	b.n	80013fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbf1      	blt.n	80013e6 <_write+0x12>
  }
  return len;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_close>:

int _close(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001434:	605a      	str	r2, [r3, #4]
  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_isatty>:

int _isatty(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f002 fa04 	bl	80038b0 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000244 	.word	0x20000244
 80014dc:	20000398 	.word	0x20000398

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001508:	f7ff ffea 	bl	80014e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	@ (8001544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	@ (8001550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f002 f9c3 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff fd43 	bl	8000fc0 <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001548:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 800154c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001550:	20000398 	.word	0x20000398

08001554 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <CAN1_RX0_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 fdcb 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fe34 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fde3 	bl	8002186 <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 fdab 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	20000248 	.word	0x20000248

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000248 	.word	0x20000248

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e033      	b.n	8001702 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fdd0 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016ca:	f023 0302 	bic.w	r3, r3, #2
 80016ce:	f043 0202 	orr.w	r2, r3, #2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fb4a 	bl	8001d70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f023 0303 	bic.w	r3, r3, #3
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80016f2:	e001      	b.n	80016f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Start_IT+0x1a>
 8001722:	2302      	movs	r3, #2
 8001724:	e0bd      	b.n	80018a2 <HAL_ADC_Start_IT+0x196>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d018      	beq.n	800176e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800174c:	4b58      	ldr	r3, [pc, #352]	@ (80018b0 <HAL_ADC_Start_IT+0x1a4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a58      	ldr	r2, [pc, #352]	@ (80018b4 <HAL_ADC_Start_IT+0x1a8>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9a      	lsrs	r2, r3, #18
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001760:	e002      	b.n	8001768 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	f040 8085 	bne.w	8001888 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017bc:	d106      	bne.n	80017cc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f023 0206 	bic.w	r2, r3, #6
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80017ca:	e002      	b.n	80017d2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <HAL_ADC_Start_IT+0x1ac>)
 80017dc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017e6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2b00      	cmp	r3, #0
 8001806:	d12a      	bne.n	800185e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2b      	ldr	r2, [pc, #172]	@ (80018bc <HAL_ADC_Start_IT+0x1b0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d015      	beq.n	800183e <HAL_ADC_Start_IT+0x132>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a2a      	ldr	r2, [pc, #168]	@ (80018c0 <HAL_ADC_Start_IT+0x1b4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d105      	bne.n	8001828 <HAL_ADC_Start_IT+0x11c>
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <HAL_ADC_Start_IT+0x1ac>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a25      	ldr	r2, [pc, #148]	@ (80018c4 <HAL_ADC_Start_IT+0x1b8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d136      	bne.n	80018a0 <HAL_ADC_Start_IT+0x194>
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_ADC_Start_IT+0x1ac>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d130      	bne.n	80018a0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d129      	bne.n	80018a0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e020      	b.n	80018a0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a16      	ldr	r2, [pc, #88]	@ (80018bc <HAL_ADC_Start_IT+0x1b0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d11b      	bne.n	80018a0 <HAL_ADC_Start_IT+0x194>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d114      	bne.n	80018a0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	e00b      	b.n	80018a0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f043 0210 	orr.w	r2, r3, #16
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	40012300 	.word	0x40012300
 80018bc:	40012000 	.word	0x40012000
 80018c0:	40012100 	.word	0x40012100
 80018c4:	40012200 	.word	0x40012200

080018c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d049      	beq.n	8001992 <HAL_ADC_IRQHandler+0xca>
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d046      	beq.n	8001992 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d12b      	bne.n	8001982 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192e:	2b00      	cmp	r3, #0
 8001930:	d127      	bne.n	8001982 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0220 	bic.w	r2, r2, #32
 800195c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff faa6 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0212 	mvn.w	r2, #18
 8001990:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d057      	beq.n	8001a58 <HAL_ADC_IRQHandler+0x190>
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d054      	beq.n	8001a58 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d139      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d12b      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d124      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11d      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d119      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a22:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fa8d 	bl	8001f68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f06f 020c 	mvn.w	r2, #12
 8001a56:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a66:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d017      	beq.n	8001a9e <HAL_ADC_IRQHandler+0x1d6>
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d014      	beq.n	8001a9e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10d      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f837 	bl	8001b02 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0201 	mvn.w	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aac:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x218>
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0220 	mvn.w	r2, #32
 8001ace:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f820 	bl	8001b16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0220 	mvn.w	r2, #32
 8001ade:	601a      	str	r2, [r3, #0]
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1c>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e105      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x228>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d925      	bls.n	8001ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68d9      	ldr	r1, [r3, #12]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43da      	mvns	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68d9      	ldr	r1, [r3, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4403      	add	r3, r0
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	e022      	b.n	8001bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2207      	movs	r2, #7
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4403      	add	r3, r0
 8001be0:	409a      	lsls	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d824      	bhi.n	8001c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b05      	subs	r3, #5
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	400a      	ands	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b05      	subs	r3, #5
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c3a:	e04c      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d824      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b23      	subs	r3, #35	@ 0x23
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b23      	subs	r3, #35	@ 0x23
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c8c:	e023      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b41      	subs	r3, #65	@ 0x41
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	400a      	ands	r2, r1
 8001cae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b41      	subs	r3, #65	@ 0x41
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <HAL_ADC_ConfigChannel+0x234>)
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d123      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x1e6>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d11b      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_ADC_ConfigChannel+0x23c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a10      	ldr	r2, [pc, #64]	@ (8001d6c <HAL_ADC_ConfigChannel+0x240>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9a      	lsrs	r2, r3, #18
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	40012000 	.word	0x40012000
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b79      	ldr	r3, [pc, #484]	@ (8001f60 <ADC_Init+0x1f0>)
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	4a58      	ldr	r2, [pc, #352]	@ (8001f64 <ADC_Init+0x1f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00f      	b.n	8001e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0202 	bic.w	r2, r2, #2
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eaa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001eba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	035a      	lsls	r2, r3, #13
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051a      	lsls	r2, r3, #20
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f26:	025a      	lsls	r2, r3, #9
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	029a      	lsls	r2, r3, #10
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff3e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff31 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e16b      	b.n	8002494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 815a 	bne.w	800248e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b60      	ldr	r3, [pc, #384]	@ (80024ac <HAL_GPIO_Init+0x30c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a5f      	ldr	r2, [pc, #380]	@ (80024ac <HAL_GPIO_Init+0x30c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b5d      	ldr	r3, [pc, #372]	@ (80024ac <HAL_GPIO_Init+0x30c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5b      	ldr	r2, [pc, #364]	@ (80024b0 <HAL_GPIO_Init+0x310>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_GPIO_Init+0x314>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	@ (80024b8 <HAL_GPIO_Init+0x318>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <HAL_GPIO_Init+0x31c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	@ (80024c0 <HAL_GPIO_Init+0x320>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4e      	ldr	r2, [pc, #312]	@ (80024c4 <HAL_GPIO_Init+0x324>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4d      	ldr	r2, [pc, #308]	@ (80024c8 <HAL_GPIO_Init+0x328>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4c      	ldr	r2, [pc, #304]	@ (80024cc <HAL_GPIO_Init+0x32c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	@ (80024d0 <HAL_GPIO_Init+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20a>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	@ (80024b0 <HAL_GPIO_Init+0x310>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a32      	ldr	r2, [pc, #200]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a27      	ldr	r2, [pc, #156]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae90 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	@ 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40021400 	.word	0x40021400
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40021c00 	.word	0x40021c00
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f4:	e003      	b.n	80024fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e267      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d075      	beq.n	8002616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800252a:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d00c      	beq.n	8002550 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b85      	ldr	r3, [pc, #532]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253e:	2b08      	cmp	r3, #8
 8002540:	d112      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4b82      	ldr	r3, [pc, #520]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	4b7e      	ldr	r3, [pc, #504]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05b      	beq.n	8002614 <HAL_RCC_OscConfig+0x108>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d157      	bne.n	8002614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e242      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
 8002572:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a75      	ldr	r2, [pc, #468]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b70      	ldr	r3, [pc, #448]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6f      	ldr	r2, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6c      	ldr	r2, [pc, #432]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 80025a4:	4b69      	ldr	r3, [pc, #420]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a68      	ldr	r2, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a65      	ldr	r2, [pc, #404]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff f82e 	bl	8001624 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f82a 	bl	8001624 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e207      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xc0>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f81a 	bl	8001624 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff f816 	bl	8001624 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1f3      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b51      	ldr	r3, [pc, #324]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0xe8>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002622:	4b4a      	ldr	r3, [pc, #296]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b44      	ldr	r3, [pc, #272]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1c7      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4937      	ldr	r1, [pc, #220]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <HAL_RCC_OscConfig+0x244>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe ffcf 	bl	8001624 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe ffcb 	bl	8001624 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1a8      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4925      	ldr	r1, [pc, #148]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <HAL_RCC_OscConfig+0x244>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe ffae 	bl	8001624 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe ffaa 	bl	8001624 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e187      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d036      	beq.n	8002764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_RCC_OscConfig+0x248>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe ff8e 	bl	8001624 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe ff8a 	bl	8001624 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e167      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
 800272a:	e01b      	b.n	8002764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_OscConfig+0x248>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe ff77 	bl	8001624 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	e00e      	b.n	8002758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe ff73 	bl	8001624 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d907      	bls.n	8002758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e150      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
 800274c:	40023800 	.word	0x40023800
 8002750:	42470000 	.word	0x42470000
 8002754:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ea      	bne.n	800273a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8097 	beq.w	80028a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b81      	ldr	r3, [pc, #516]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b7d      	ldr	r3, [pc, #500]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a7c      	ldr	r2, [pc, #496]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b7a      	ldr	r3, [pc, #488]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b77      	ldr	r3, [pc, #476]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b74      	ldr	r3, [pc, #464]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a73      	ldr	r2, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe ff33 	bl	8001624 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe ff2f 	bl	8001624 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e10c      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2ea>
 80027e8:	4b64      	ldr	r3, [pc, #400]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a63      	ldr	r2, [pc, #396]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x324>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x30c>
 80027fe:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	@ 0x70
 800280a:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a5b      	ldr	r2, [pc, #364]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x324>
 8002818:	4b58      	ldr	r3, [pc, #352]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	4a57      	ldr	r2, [pc, #348]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	@ 0x70
 8002824:	4b55      	ldr	r3, [pc, #340]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	4a54      	ldr	r2, [pc, #336]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fef4 	bl	8001624 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fef0 	bl	8001624 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0cb      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b49      	ldr	r3, [pc, #292]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fede 	bl	8001624 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe feda 	bl	8001624 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b5      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	4b3e      	ldr	r3, [pc, #248]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b39      	ldr	r3, [pc, #228]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	4a38      	ldr	r2, [pc, #224]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a1 	beq.w	80029ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028aa:	4b34      	ldr	r3, [pc, #208]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d05c      	beq.n	8002970 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d141      	bne.n	8002942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe feae 	bl	8001624 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe feaa 	bl	8001624 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e087      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	491b      	ldr	r1, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fe83 	bl	8001624 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe fe7f 	bl	8001624 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e05c      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x416>
 8002940:	e054      	b.n	80029ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fe6c 	bl	8001624 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fe68 	bl	8001624 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e045      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x444>
 800296e:	e03d      	b.n	80029ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e038      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
 8002984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d028      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d121      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11a      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	3b01      	subs	r3, #1
 80029d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cc      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b68      	ldr	r3, [pc, #416]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d90c      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d044      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e067      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b37      	ldr	r3, [pc, #220]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4934      	ldr	r1, [pc, #208]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fd9a 	bl	8001624 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fd96 	bl	8001624 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e04f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d20c      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fcfa 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08005670 	.word	0x08005670
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b090      	sub	sp, #64	@ 0x40
 8002bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be0:	4b59      	ldr	r3, [pc, #356]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d00d      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x40>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	f200 80a1 	bhi.w	8002d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x34>
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bfa:	e09b      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b53      	ldr	r3, [pc, #332]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8002bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c00:	e09b      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c02:	4b53      	ldr	r3, [pc, #332]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c06:	e098      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c08:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c12:	4b4d      	ldr	r3, [pc, #308]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d028      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	2200      	movs	r2, #0
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c30:	2100      	movs	r1, #0
 8002c32:	4b47      	ldr	r3, [pc, #284]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c34:	fb03 f201 	mul.w	r2, r3, r1
 8002c38:	2300      	movs	r3, #0
 8002c3a:	fb00 f303 	mul.w	r3, r0, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a43      	ldr	r2, [pc, #268]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c42:	fba0 1202 	umull	r1, r2, r0, r2
 8002c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c48:	460a      	mov	r2, r1
 8002c4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4e:	4413      	add	r3, r2
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c54:	2200      	movs	r2, #0
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	61fa      	str	r2, [r7, #28]
 8002c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c62:	f7fd ffa1 	bl	8000ba8 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6e:	e053      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c70:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	2200      	movs	r2, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	617a      	str	r2, [r7, #20]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c82:	f04f 0b00 	mov.w	fp, #0
 8002c86:	4652      	mov	r2, sl
 8002c88:	465b      	mov	r3, fp
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	0159      	lsls	r1, r3, #5
 8002c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c98:	0150      	lsls	r0, r2, #5
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8002ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cba:	ebb2 0408 	subs.w	r4, r2, r8
 8002cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	00eb      	lsls	r3, r5, #3
 8002ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd0:	00e2      	lsls	r2, r4, #3
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	eb14 030a 	adds.w	r3, r4, sl
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	eb45 030b 	adc.w	r3, r5, fp
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cee:	4629      	mov	r1, r5
 8002cf0:	028b      	lsls	r3, r1, #10
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	028a      	lsls	r2, r1, #10
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d02:	2200      	movs	r2, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	60fa      	str	r2, [r7, #12]
 8002d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0c:	f7fd ff4c 	bl	8000ba8 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4613      	mov	r3, r2
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	3301      	adds	r3, #1
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3740      	adds	r7, #64	@ 0x40
 8002d40:	46bd      	mov	sp, r7
 8002d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	017d7840 	.word	0x017d7840

08002d54 <__cvt>:
 8002d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d58:	ec57 6b10 	vmov	r6, r7, d0
 8002d5c:	2f00      	cmp	r7, #0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	4619      	mov	r1, r3
 8002d62:	463b      	mov	r3, r7
 8002d64:	bfbb      	ittet	lt
 8002d66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002d6a:	461f      	movlt	r7, r3
 8002d6c:	2300      	movge	r3, #0
 8002d6e:	232d      	movlt	r3, #45	@ 0x2d
 8002d70:	700b      	strb	r3, [r1, #0]
 8002d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002d74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002d78:	4691      	mov	r9, r2
 8002d7a:	f023 0820 	bic.w	r8, r3, #32
 8002d7e:	bfbc      	itt	lt
 8002d80:	4632      	movlt	r2, r6
 8002d82:	4616      	movlt	r6, r2
 8002d84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d88:	d005      	beq.n	8002d96 <__cvt+0x42>
 8002d8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002d8e:	d100      	bne.n	8002d92 <__cvt+0x3e>
 8002d90:	3401      	adds	r4, #1
 8002d92:	2102      	movs	r1, #2
 8002d94:	e000      	b.n	8002d98 <__cvt+0x44>
 8002d96:	2103      	movs	r1, #3
 8002d98:	ab03      	add	r3, sp, #12
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	ab02      	add	r3, sp, #8
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	ec47 6b10 	vmov	d0, r6, r7
 8002da4:	4653      	mov	r3, sl
 8002da6:	4622      	mov	r2, r4
 8002da8:	f000 fe3a 	bl	8003a20 <_dtoa_r>
 8002dac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002db0:	4605      	mov	r5, r0
 8002db2:	d119      	bne.n	8002de8 <__cvt+0x94>
 8002db4:	f019 0f01 	tst.w	r9, #1
 8002db8:	d00e      	beq.n	8002dd8 <__cvt+0x84>
 8002dba:	eb00 0904 	add.w	r9, r0, r4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	4639      	mov	r1, r7
 8002dc6:	f7fd fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002dca:	b108      	cbz	r0, 8002dd0 <__cvt+0x7c>
 8002dcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8002dd0:	2230      	movs	r2, #48	@ 0x30
 8002dd2:	9b03      	ldr	r3, [sp, #12]
 8002dd4:	454b      	cmp	r3, r9
 8002dd6:	d31e      	bcc.n	8002e16 <__cvt+0xc2>
 8002dd8:	9b03      	ldr	r3, [sp, #12]
 8002dda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002ddc:	1b5b      	subs	r3, r3, r5
 8002dde:	4628      	mov	r0, r5
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	b004      	add	sp, #16
 8002de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002dec:	eb00 0904 	add.w	r9, r0, r4
 8002df0:	d1e5      	bne.n	8002dbe <__cvt+0x6a>
 8002df2:	7803      	ldrb	r3, [r0, #0]
 8002df4:	2b30      	cmp	r3, #48	@ 0x30
 8002df6:	d10a      	bne.n	8002e0e <__cvt+0xba>
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	4639      	mov	r1, r7
 8002e00:	f7fd fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e04:	b918      	cbnz	r0, 8002e0e <__cvt+0xba>
 8002e06:	f1c4 0401 	rsb	r4, r4, #1
 8002e0a:	f8ca 4000 	str.w	r4, [sl]
 8002e0e:	f8da 3000 	ldr.w	r3, [sl]
 8002e12:	4499      	add	r9, r3
 8002e14:	e7d3      	b.n	8002dbe <__cvt+0x6a>
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	9103      	str	r1, [sp, #12]
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e7d9      	b.n	8002dd2 <__cvt+0x7e>

08002e1e <__exponent>:
 8002e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e20:	2900      	cmp	r1, #0
 8002e22:	bfba      	itte	lt
 8002e24:	4249      	neglt	r1, r1
 8002e26:	232d      	movlt	r3, #45	@ 0x2d
 8002e28:	232b      	movge	r3, #43	@ 0x2b
 8002e2a:	2909      	cmp	r1, #9
 8002e2c:	7002      	strb	r2, [r0, #0]
 8002e2e:	7043      	strb	r3, [r0, #1]
 8002e30:	dd29      	ble.n	8002e86 <__exponent+0x68>
 8002e32:	f10d 0307 	add.w	r3, sp, #7
 8002e36:	461d      	mov	r5, r3
 8002e38:	270a      	movs	r7, #10
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002e40:	fb07 1416 	mls	r4, r7, r6, r1
 8002e44:	3430      	adds	r4, #48	@ 0x30
 8002e46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	2c63      	cmp	r4, #99	@ 0x63
 8002e4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e52:	4631      	mov	r1, r6
 8002e54:	dcf1      	bgt.n	8002e3a <__exponent+0x1c>
 8002e56:	3130      	adds	r1, #48	@ 0x30
 8002e58:	1e94      	subs	r4, r2, #2
 8002e5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e5e:	1c41      	adds	r1, r0, #1
 8002e60:	4623      	mov	r3, r4
 8002e62:	42ab      	cmp	r3, r5
 8002e64:	d30a      	bcc.n	8002e7c <__exponent+0x5e>
 8002e66:	f10d 0309 	add.w	r3, sp, #9
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	42ac      	cmp	r4, r5
 8002e6e:	bf88      	it	hi
 8002e70:	2300      	movhi	r3, #0
 8002e72:	3302      	adds	r3, #2
 8002e74:	4403      	add	r3, r0
 8002e76:	1a18      	subs	r0, r3, r0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002e80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002e84:	e7ed      	b.n	8002e62 <__exponent+0x44>
 8002e86:	2330      	movs	r3, #48	@ 0x30
 8002e88:	3130      	adds	r1, #48	@ 0x30
 8002e8a:	7083      	strb	r3, [r0, #2]
 8002e8c:	70c1      	strb	r1, [r0, #3]
 8002e8e:	1d03      	adds	r3, r0, #4
 8002e90:	e7f1      	b.n	8002e76 <__exponent+0x58>
	...

08002e94 <_printf_float>:
 8002e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e98:	b08d      	sub	sp, #52	@ 0x34
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	4605      	mov	r5, r0
 8002ea6:	f000 fcb9 	bl	800381c <_localeconv_r>
 8002eaa:	6803      	ldr	r3, [r0, #0]
 8002eac:	9304      	str	r3, [sp, #16]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd f9de 	bl	8000270 <strlen>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8002ebc:	9005      	str	r0, [sp, #20]
 8002ebe:	3307      	adds	r3, #7
 8002ec0:	f023 0307 	bic.w	r3, r3, #7
 8002ec4:	f103 0208 	add.w	r2, r3, #8
 8002ec8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ecc:	f8d4 b000 	ldr.w	fp, [r4]
 8002ed0:	f8c8 2000 	str.w	r2, [r8]
 8002ed4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ed8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002edc:	9307      	str	r3, [sp, #28]
 8002ede:	f8cd 8018 	str.w	r8, [sp, #24]
 8002ee2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002eea:	4b9c      	ldr	r3, [pc, #624]	@ (800315c <_printf_float+0x2c8>)
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	f7fd fe1c 	bl	8000b2c <__aeabi_dcmpun>
 8002ef4:	bb70      	cbnz	r0, 8002f54 <_printf_float+0xc0>
 8002ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002efa:	4b98      	ldr	r3, [pc, #608]	@ (800315c <_printf_float+0x2c8>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	f7fd fdf6 	bl	8000af0 <__aeabi_dcmple>
 8002f04:	bb30      	cbnz	r0, 8002f54 <_printf_float+0xc0>
 8002f06:	2200      	movs	r2, #0
 8002f08:	2300      	movs	r3, #0
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	f7fd fde5 	bl	8000adc <__aeabi_dcmplt>
 8002f12:	b110      	cbz	r0, 8002f1a <_printf_float+0x86>
 8002f14:	232d      	movs	r3, #45	@ 0x2d
 8002f16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f1a:	4a91      	ldr	r2, [pc, #580]	@ (8003160 <_printf_float+0x2cc>)
 8002f1c:	4b91      	ldr	r3, [pc, #580]	@ (8003164 <_printf_float+0x2d0>)
 8002f1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002f22:	bf8c      	ite	hi
 8002f24:	4690      	movhi	r8, r2
 8002f26:	4698      	movls	r8, r3
 8002f28:	2303      	movs	r3, #3
 8002f2a:	6123      	str	r3, [r4, #16]
 8002f2c:	f02b 0304 	bic.w	r3, fp, #4
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	f04f 0900 	mov.w	r9, #0
 8002f36:	9700      	str	r7, [sp, #0]
 8002f38:	4633      	mov	r3, r6
 8002f3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 f9d2 	bl	80032e8 <_printf_common>
 8002f44:	3001      	adds	r0, #1
 8002f46:	f040 808d 	bne.w	8003064 <_printf_float+0x1d0>
 8002f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4e:	b00d      	add	sp, #52	@ 0x34
 8002f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	4640      	mov	r0, r8
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	f7fd fde6 	bl	8000b2c <__aeabi_dcmpun>
 8002f60:	b140      	cbz	r0, 8002f74 <_printf_float+0xe0>
 8002f62:	464b      	mov	r3, r9
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bfbc      	itt	lt
 8002f68:	232d      	movlt	r3, #45	@ 0x2d
 8002f6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003168 <_printf_float+0x2d4>)
 8002f70:	4b7e      	ldr	r3, [pc, #504]	@ (800316c <_printf_float+0x2d8>)
 8002f72:	e7d4      	b.n	8002f1e <_printf_float+0x8a>
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002f7a:	9206      	str	r2, [sp, #24]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	d13b      	bne.n	8002ff8 <_printf_float+0x164>
 8002f80:	2306      	movs	r3, #6
 8002f82:	6063      	str	r3, [r4, #4]
 8002f84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6022      	str	r2, [r4, #0]
 8002f8c:	9303      	str	r3, [sp, #12]
 8002f8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002f90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002f94:	ab09      	add	r3, sp, #36	@ 0x24
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	6861      	ldr	r1, [r4, #4]
 8002f9a:	ec49 8b10 	vmov	d0, r8, r9
 8002f9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f7ff fed6 	bl	8002d54 <__cvt>
 8002fa8:	9b06      	ldr	r3, [sp, #24]
 8002faa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002fac:	2b47      	cmp	r3, #71	@ 0x47
 8002fae:	4680      	mov	r8, r0
 8002fb0:	d129      	bne.n	8003006 <_printf_float+0x172>
 8002fb2:	1cc8      	adds	r0, r1, #3
 8002fb4:	db02      	blt.n	8002fbc <_printf_float+0x128>
 8002fb6:	6863      	ldr	r3, [r4, #4]
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	dd41      	ble.n	8003040 <_printf_float+0x1ac>
 8002fbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8002fc0:	fa5f fa8a 	uxtb.w	sl, sl
 8002fc4:	3901      	subs	r1, #1
 8002fc6:	4652      	mov	r2, sl
 8002fc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002fcc:	9109      	str	r1, [sp, #36]	@ 0x24
 8002fce:	f7ff ff26 	bl	8002e1e <__exponent>
 8002fd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002fd4:	1813      	adds	r3, r2, r0
 8002fd6:	2a01      	cmp	r2, #1
 8002fd8:	4681      	mov	r9, r0
 8002fda:	6123      	str	r3, [r4, #16]
 8002fdc:	dc02      	bgt.n	8002fe4 <_printf_float+0x150>
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	07d2      	lsls	r2, r2, #31
 8002fe2:	d501      	bpl.n	8002fe8 <_printf_float+0x154>
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	6123      	str	r3, [r4, #16]
 8002fe8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0a2      	beq.n	8002f36 <_printf_float+0xa2>
 8002ff0:	232d      	movs	r3, #45	@ 0x2d
 8002ff2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ff6:	e79e      	b.n	8002f36 <_printf_float+0xa2>
 8002ff8:	9a06      	ldr	r2, [sp, #24]
 8002ffa:	2a47      	cmp	r2, #71	@ 0x47
 8002ffc:	d1c2      	bne.n	8002f84 <_printf_float+0xf0>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1c0      	bne.n	8002f84 <_printf_float+0xf0>
 8003002:	2301      	movs	r3, #1
 8003004:	e7bd      	b.n	8002f82 <_printf_float+0xee>
 8003006:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800300a:	d9db      	bls.n	8002fc4 <_printf_float+0x130>
 800300c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003010:	d118      	bne.n	8003044 <_printf_float+0x1b0>
 8003012:	2900      	cmp	r1, #0
 8003014:	6863      	ldr	r3, [r4, #4]
 8003016:	dd0b      	ble.n	8003030 <_printf_float+0x19c>
 8003018:	6121      	str	r1, [r4, #16]
 800301a:	b913      	cbnz	r3, 8003022 <_printf_float+0x18e>
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	07d0      	lsls	r0, r2, #31
 8003020:	d502      	bpl.n	8003028 <_printf_float+0x194>
 8003022:	3301      	adds	r3, #1
 8003024:	440b      	add	r3, r1
 8003026:	6123      	str	r3, [r4, #16]
 8003028:	65a1      	str	r1, [r4, #88]	@ 0x58
 800302a:	f04f 0900 	mov.w	r9, #0
 800302e:	e7db      	b.n	8002fe8 <_printf_float+0x154>
 8003030:	b913      	cbnz	r3, 8003038 <_printf_float+0x1a4>
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	07d2      	lsls	r2, r2, #31
 8003036:	d501      	bpl.n	800303c <_printf_float+0x1a8>
 8003038:	3302      	adds	r3, #2
 800303a:	e7f4      	b.n	8003026 <_printf_float+0x192>
 800303c:	2301      	movs	r3, #1
 800303e:	e7f2      	b.n	8003026 <_printf_float+0x192>
 8003040:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003046:	4299      	cmp	r1, r3
 8003048:	db05      	blt.n	8003056 <_printf_float+0x1c2>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	6121      	str	r1, [r4, #16]
 800304e:	07d8      	lsls	r0, r3, #31
 8003050:	d5ea      	bpl.n	8003028 <_printf_float+0x194>
 8003052:	1c4b      	adds	r3, r1, #1
 8003054:	e7e7      	b.n	8003026 <_printf_float+0x192>
 8003056:	2900      	cmp	r1, #0
 8003058:	bfd4      	ite	le
 800305a:	f1c1 0202 	rsble	r2, r1, #2
 800305e:	2201      	movgt	r2, #1
 8003060:	4413      	add	r3, r2
 8003062:	e7e0      	b.n	8003026 <_printf_float+0x192>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	055a      	lsls	r2, r3, #21
 8003068:	d407      	bmi.n	800307a <_printf_float+0x1e6>
 800306a:	6923      	ldr	r3, [r4, #16]
 800306c:	4642      	mov	r2, r8
 800306e:	4631      	mov	r1, r6
 8003070:	4628      	mov	r0, r5
 8003072:	47b8      	blx	r7
 8003074:	3001      	adds	r0, #1
 8003076:	d12b      	bne.n	80030d0 <_printf_float+0x23c>
 8003078:	e767      	b.n	8002f4a <_printf_float+0xb6>
 800307a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800307e:	f240 80dd 	bls.w	800323c <_printf_float+0x3a8>
 8003082:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003086:	2200      	movs	r2, #0
 8003088:	2300      	movs	r3, #0
 800308a:	f7fd fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800308e:	2800      	cmp	r0, #0
 8003090:	d033      	beq.n	80030fa <_printf_float+0x266>
 8003092:	4a37      	ldr	r2, [pc, #220]	@ (8003170 <_printf_float+0x2dc>)
 8003094:	2301      	movs	r3, #1
 8003096:	4631      	mov	r1, r6
 8003098:	4628      	mov	r0, r5
 800309a:	47b8      	blx	r7
 800309c:	3001      	adds	r0, #1
 800309e:	f43f af54 	beq.w	8002f4a <_printf_float+0xb6>
 80030a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80030a6:	4543      	cmp	r3, r8
 80030a8:	db02      	blt.n	80030b0 <_printf_float+0x21c>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	07d8      	lsls	r0, r3, #31
 80030ae:	d50f      	bpl.n	80030d0 <_printf_float+0x23c>
 80030b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030b4:	4631      	mov	r1, r6
 80030b6:	4628      	mov	r0, r5
 80030b8:	47b8      	blx	r7
 80030ba:	3001      	adds	r0, #1
 80030bc:	f43f af45 	beq.w	8002f4a <_printf_float+0xb6>
 80030c0:	f04f 0900 	mov.w	r9, #0
 80030c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80030c8:	f104 0a1a 	add.w	sl, r4, #26
 80030cc:	45c8      	cmp	r8, r9
 80030ce:	dc09      	bgt.n	80030e4 <_printf_float+0x250>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	079b      	lsls	r3, r3, #30
 80030d4:	f100 8103 	bmi.w	80032de <_printf_float+0x44a>
 80030d8:	68e0      	ldr	r0, [r4, #12]
 80030da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80030dc:	4298      	cmp	r0, r3
 80030de:	bfb8      	it	lt
 80030e0:	4618      	movlt	r0, r3
 80030e2:	e734      	b.n	8002f4e <_printf_float+0xba>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4652      	mov	r2, sl
 80030e8:	4631      	mov	r1, r6
 80030ea:	4628      	mov	r0, r5
 80030ec:	47b8      	blx	r7
 80030ee:	3001      	adds	r0, #1
 80030f0:	f43f af2b 	beq.w	8002f4a <_printf_float+0xb6>
 80030f4:	f109 0901 	add.w	r9, r9, #1
 80030f8:	e7e8      	b.n	80030cc <_printf_float+0x238>
 80030fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	dc39      	bgt.n	8003174 <_printf_float+0x2e0>
 8003100:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <_printf_float+0x2dc>)
 8003102:	2301      	movs	r3, #1
 8003104:	4631      	mov	r1, r6
 8003106:	4628      	mov	r0, r5
 8003108:	47b8      	blx	r7
 800310a:	3001      	adds	r0, #1
 800310c:	f43f af1d 	beq.w	8002f4a <_printf_float+0xb6>
 8003110:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003114:	ea59 0303 	orrs.w	r3, r9, r3
 8003118:	d102      	bne.n	8003120 <_printf_float+0x28c>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	07d9      	lsls	r1, r3, #31
 800311e:	d5d7      	bpl.n	80030d0 <_printf_float+0x23c>
 8003120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003124:	4631      	mov	r1, r6
 8003126:	4628      	mov	r0, r5
 8003128:	47b8      	blx	r7
 800312a:	3001      	adds	r0, #1
 800312c:	f43f af0d 	beq.w	8002f4a <_printf_float+0xb6>
 8003130:	f04f 0a00 	mov.w	sl, #0
 8003134:	f104 0b1a 	add.w	fp, r4, #26
 8003138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800313a:	425b      	negs	r3, r3
 800313c:	4553      	cmp	r3, sl
 800313e:	dc01      	bgt.n	8003144 <_printf_float+0x2b0>
 8003140:	464b      	mov	r3, r9
 8003142:	e793      	b.n	800306c <_printf_float+0x1d8>
 8003144:	2301      	movs	r3, #1
 8003146:	465a      	mov	r2, fp
 8003148:	4631      	mov	r1, r6
 800314a:	4628      	mov	r0, r5
 800314c:	47b8      	blx	r7
 800314e:	3001      	adds	r0, #1
 8003150:	f43f aefb 	beq.w	8002f4a <_printf_float+0xb6>
 8003154:	f10a 0a01 	add.w	sl, sl, #1
 8003158:	e7ee      	b.n	8003138 <_printf_float+0x2a4>
 800315a:	bf00      	nop
 800315c:	7fefffff 	.word	0x7fefffff
 8003160:	08005684 	.word	0x08005684
 8003164:	08005680 	.word	0x08005680
 8003168:	0800568c 	.word	0x0800568c
 800316c:	08005688 	.word	0x08005688
 8003170:	08005690 	.word	0x08005690
 8003174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003176:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800317a:	4553      	cmp	r3, sl
 800317c:	bfa8      	it	ge
 800317e:	4653      	movge	r3, sl
 8003180:	2b00      	cmp	r3, #0
 8003182:	4699      	mov	r9, r3
 8003184:	dc36      	bgt.n	80031f4 <_printf_float+0x360>
 8003186:	f04f 0b00 	mov.w	fp, #0
 800318a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800318e:	f104 021a 	add.w	r2, r4, #26
 8003192:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003194:	9306      	str	r3, [sp, #24]
 8003196:	eba3 0309 	sub.w	r3, r3, r9
 800319a:	455b      	cmp	r3, fp
 800319c:	dc31      	bgt.n	8003202 <_printf_float+0x36e>
 800319e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031a0:	459a      	cmp	sl, r3
 80031a2:	dc3a      	bgt.n	800321a <_printf_float+0x386>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	07da      	lsls	r2, r3, #31
 80031a8:	d437      	bmi.n	800321a <_printf_float+0x386>
 80031aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031ac:	ebaa 0903 	sub.w	r9, sl, r3
 80031b0:	9b06      	ldr	r3, [sp, #24]
 80031b2:	ebaa 0303 	sub.w	r3, sl, r3
 80031b6:	4599      	cmp	r9, r3
 80031b8:	bfa8      	it	ge
 80031ba:	4699      	movge	r9, r3
 80031bc:	f1b9 0f00 	cmp.w	r9, #0
 80031c0:	dc33      	bgt.n	800322a <_printf_float+0x396>
 80031c2:	f04f 0800 	mov.w	r8, #0
 80031c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031ca:	f104 0b1a 	add.w	fp, r4, #26
 80031ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031d0:	ebaa 0303 	sub.w	r3, sl, r3
 80031d4:	eba3 0309 	sub.w	r3, r3, r9
 80031d8:	4543      	cmp	r3, r8
 80031da:	f77f af79 	ble.w	80030d0 <_printf_float+0x23c>
 80031de:	2301      	movs	r3, #1
 80031e0:	465a      	mov	r2, fp
 80031e2:	4631      	mov	r1, r6
 80031e4:	4628      	mov	r0, r5
 80031e6:	47b8      	blx	r7
 80031e8:	3001      	adds	r0, #1
 80031ea:	f43f aeae 	beq.w	8002f4a <_printf_float+0xb6>
 80031ee:	f108 0801 	add.w	r8, r8, #1
 80031f2:	e7ec      	b.n	80031ce <_printf_float+0x33a>
 80031f4:	4642      	mov	r2, r8
 80031f6:	4631      	mov	r1, r6
 80031f8:	4628      	mov	r0, r5
 80031fa:	47b8      	blx	r7
 80031fc:	3001      	adds	r0, #1
 80031fe:	d1c2      	bne.n	8003186 <_printf_float+0x2f2>
 8003200:	e6a3      	b.n	8002f4a <_printf_float+0xb6>
 8003202:	2301      	movs	r3, #1
 8003204:	4631      	mov	r1, r6
 8003206:	4628      	mov	r0, r5
 8003208:	9206      	str	r2, [sp, #24]
 800320a:	47b8      	blx	r7
 800320c:	3001      	adds	r0, #1
 800320e:	f43f ae9c 	beq.w	8002f4a <_printf_float+0xb6>
 8003212:	9a06      	ldr	r2, [sp, #24]
 8003214:	f10b 0b01 	add.w	fp, fp, #1
 8003218:	e7bb      	b.n	8003192 <_printf_float+0x2fe>
 800321a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800321e:	4631      	mov	r1, r6
 8003220:	4628      	mov	r0, r5
 8003222:	47b8      	blx	r7
 8003224:	3001      	adds	r0, #1
 8003226:	d1c0      	bne.n	80031aa <_printf_float+0x316>
 8003228:	e68f      	b.n	8002f4a <_printf_float+0xb6>
 800322a:	9a06      	ldr	r2, [sp, #24]
 800322c:	464b      	mov	r3, r9
 800322e:	4442      	add	r2, r8
 8003230:	4631      	mov	r1, r6
 8003232:	4628      	mov	r0, r5
 8003234:	47b8      	blx	r7
 8003236:	3001      	adds	r0, #1
 8003238:	d1c3      	bne.n	80031c2 <_printf_float+0x32e>
 800323a:	e686      	b.n	8002f4a <_printf_float+0xb6>
 800323c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003240:	f1ba 0f01 	cmp.w	sl, #1
 8003244:	dc01      	bgt.n	800324a <_printf_float+0x3b6>
 8003246:	07db      	lsls	r3, r3, #31
 8003248:	d536      	bpl.n	80032b8 <_printf_float+0x424>
 800324a:	2301      	movs	r3, #1
 800324c:	4642      	mov	r2, r8
 800324e:	4631      	mov	r1, r6
 8003250:	4628      	mov	r0, r5
 8003252:	47b8      	blx	r7
 8003254:	3001      	adds	r0, #1
 8003256:	f43f ae78 	beq.w	8002f4a <_printf_float+0xb6>
 800325a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800325e:	4631      	mov	r1, r6
 8003260:	4628      	mov	r0, r5
 8003262:	47b8      	blx	r7
 8003264:	3001      	adds	r0, #1
 8003266:	f43f ae70 	beq.w	8002f4a <_printf_float+0xb6>
 800326a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800326e:	2200      	movs	r2, #0
 8003270:	2300      	movs	r3, #0
 8003272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003276:	f7fd fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800327a:	b9c0      	cbnz	r0, 80032ae <_printf_float+0x41a>
 800327c:	4653      	mov	r3, sl
 800327e:	f108 0201 	add.w	r2, r8, #1
 8003282:	4631      	mov	r1, r6
 8003284:	4628      	mov	r0, r5
 8003286:	47b8      	blx	r7
 8003288:	3001      	adds	r0, #1
 800328a:	d10c      	bne.n	80032a6 <_printf_float+0x412>
 800328c:	e65d      	b.n	8002f4a <_printf_float+0xb6>
 800328e:	2301      	movs	r3, #1
 8003290:	465a      	mov	r2, fp
 8003292:	4631      	mov	r1, r6
 8003294:	4628      	mov	r0, r5
 8003296:	47b8      	blx	r7
 8003298:	3001      	adds	r0, #1
 800329a:	f43f ae56 	beq.w	8002f4a <_printf_float+0xb6>
 800329e:	f108 0801 	add.w	r8, r8, #1
 80032a2:	45d0      	cmp	r8, sl
 80032a4:	dbf3      	blt.n	800328e <_printf_float+0x3fa>
 80032a6:	464b      	mov	r3, r9
 80032a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80032ac:	e6df      	b.n	800306e <_printf_float+0x1da>
 80032ae:	f04f 0800 	mov.w	r8, #0
 80032b2:	f104 0b1a 	add.w	fp, r4, #26
 80032b6:	e7f4      	b.n	80032a2 <_printf_float+0x40e>
 80032b8:	2301      	movs	r3, #1
 80032ba:	4642      	mov	r2, r8
 80032bc:	e7e1      	b.n	8003282 <_printf_float+0x3ee>
 80032be:	2301      	movs	r3, #1
 80032c0:	464a      	mov	r2, r9
 80032c2:	4631      	mov	r1, r6
 80032c4:	4628      	mov	r0, r5
 80032c6:	47b8      	blx	r7
 80032c8:	3001      	adds	r0, #1
 80032ca:	f43f ae3e 	beq.w	8002f4a <_printf_float+0xb6>
 80032ce:	f108 0801 	add.w	r8, r8, #1
 80032d2:	68e3      	ldr	r3, [r4, #12]
 80032d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80032d6:	1a5b      	subs	r3, r3, r1
 80032d8:	4543      	cmp	r3, r8
 80032da:	dcf0      	bgt.n	80032be <_printf_float+0x42a>
 80032dc:	e6fc      	b.n	80030d8 <_printf_float+0x244>
 80032de:	f04f 0800 	mov.w	r8, #0
 80032e2:	f104 0919 	add.w	r9, r4, #25
 80032e6:	e7f4      	b.n	80032d2 <_printf_float+0x43e>

080032e8 <_printf_common>:
 80032e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	4616      	mov	r6, r2
 80032ee:	4698      	mov	r8, r3
 80032f0:	688a      	ldr	r2, [r1, #8]
 80032f2:	690b      	ldr	r3, [r1, #16]
 80032f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032f8:	4293      	cmp	r3, r2
 80032fa:	bfb8      	it	lt
 80032fc:	4613      	movlt	r3, r2
 80032fe:	6033      	str	r3, [r6, #0]
 8003300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003304:	4607      	mov	r7, r0
 8003306:	460c      	mov	r4, r1
 8003308:	b10a      	cbz	r2, 800330e <_printf_common+0x26>
 800330a:	3301      	adds	r3, #1
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	0699      	lsls	r1, r3, #26
 8003312:	bf42      	ittt	mi
 8003314:	6833      	ldrmi	r3, [r6, #0]
 8003316:	3302      	addmi	r3, #2
 8003318:	6033      	strmi	r3, [r6, #0]
 800331a:	6825      	ldr	r5, [r4, #0]
 800331c:	f015 0506 	ands.w	r5, r5, #6
 8003320:	d106      	bne.n	8003330 <_printf_common+0x48>
 8003322:	f104 0a19 	add.w	sl, r4, #25
 8003326:	68e3      	ldr	r3, [r4, #12]
 8003328:	6832      	ldr	r2, [r6, #0]
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	42ab      	cmp	r3, r5
 800332e:	dc26      	bgt.n	800337e <_printf_common+0x96>
 8003330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	3b00      	subs	r3, #0
 8003338:	bf18      	it	ne
 800333a:	2301      	movne	r3, #1
 800333c:	0692      	lsls	r2, r2, #26
 800333e:	d42b      	bmi.n	8003398 <_printf_common+0xb0>
 8003340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003344:	4641      	mov	r1, r8
 8003346:	4638      	mov	r0, r7
 8003348:	47c8      	blx	r9
 800334a:	3001      	adds	r0, #1
 800334c:	d01e      	beq.n	800338c <_printf_common+0xa4>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	6922      	ldr	r2, [r4, #16]
 8003352:	f003 0306 	and.w	r3, r3, #6
 8003356:	2b04      	cmp	r3, #4
 8003358:	bf02      	ittt	eq
 800335a:	68e5      	ldreq	r5, [r4, #12]
 800335c:	6833      	ldreq	r3, [r6, #0]
 800335e:	1aed      	subeq	r5, r5, r3
 8003360:	68a3      	ldr	r3, [r4, #8]
 8003362:	bf0c      	ite	eq
 8003364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003368:	2500      	movne	r5, #0
 800336a:	4293      	cmp	r3, r2
 800336c:	bfc4      	itt	gt
 800336e:	1a9b      	subgt	r3, r3, r2
 8003370:	18ed      	addgt	r5, r5, r3
 8003372:	2600      	movs	r6, #0
 8003374:	341a      	adds	r4, #26
 8003376:	42b5      	cmp	r5, r6
 8003378:	d11a      	bne.n	80033b0 <_printf_common+0xc8>
 800337a:	2000      	movs	r0, #0
 800337c:	e008      	b.n	8003390 <_printf_common+0xa8>
 800337e:	2301      	movs	r3, #1
 8003380:	4652      	mov	r2, sl
 8003382:	4641      	mov	r1, r8
 8003384:	4638      	mov	r0, r7
 8003386:	47c8      	blx	r9
 8003388:	3001      	adds	r0, #1
 800338a:	d103      	bne.n	8003394 <_printf_common+0xac>
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003394:	3501      	adds	r5, #1
 8003396:	e7c6      	b.n	8003326 <_printf_common+0x3e>
 8003398:	18e1      	adds	r1, r4, r3
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	2030      	movs	r0, #48	@ 0x30
 800339e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033a2:	4422      	add	r2, r4
 80033a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033ac:	3302      	adds	r3, #2
 80033ae:	e7c7      	b.n	8003340 <_printf_common+0x58>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4622      	mov	r2, r4
 80033b4:	4641      	mov	r1, r8
 80033b6:	4638      	mov	r0, r7
 80033b8:	47c8      	blx	r9
 80033ba:	3001      	adds	r0, #1
 80033bc:	d0e6      	beq.n	800338c <_printf_common+0xa4>
 80033be:	3601      	adds	r6, #1
 80033c0:	e7d9      	b.n	8003376 <_printf_common+0x8e>
	...

080033c4 <_printf_i>:
 80033c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033c8:	7e0f      	ldrb	r7, [r1, #24]
 80033ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033cc:	2f78      	cmp	r7, #120	@ 0x78
 80033ce:	4691      	mov	r9, r2
 80033d0:	4680      	mov	r8, r0
 80033d2:	460c      	mov	r4, r1
 80033d4:	469a      	mov	sl, r3
 80033d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033da:	d807      	bhi.n	80033ec <_printf_i+0x28>
 80033dc:	2f62      	cmp	r7, #98	@ 0x62
 80033de:	d80a      	bhi.n	80033f6 <_printf_i+0x32>
 80033e0:	2f00      	cmp	r7, #0
 80033e2:	f000 80d1 	beq.w	8003588 <_printf_i+0x1c4>
 80033e6:	2f58      	cmp	r7, #88	@ 0x58
 80033e8:	f000 80b8 	beq.w	800355c <_printf_i+0x198>
 80033ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033f4:	e03a      	b.n	800346c <_printf_i+0xa8>
 80033f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033fa:	2b15      	cmp	r3, #21
 80033fc:	d8f6      	bhi.n	80033ec <_printf_i+0x28>
 80033fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003404 <_printf_i+0x40>)
 8003400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003404:	0800345d 	.word	0x0800345d
 8003408:	08003471 	.word	0x08003471
 800340c:	080033ed 	.word	0x080033ed
 8003410:	080033ed 	.word	0x080033ed
 8003414:	080033ed 	.word	0x080033ed
 8003418:	080033ed 	.word	0x080033ed
 800341c:	08003471 	.word	0x08003471
 8003420:	080033ed 	.word	0x080033ed
 8003424:	080033ed 	.word	0x080033ed
 8003428:	080033ed 	.word	0x080033ed
 800342c:	080033ed 	.word	0x080033ed
 8003430:	0800356f 	.word	0x0800356f
 8003434:	0800349b 	.word	0x0800349b
 8003438:	08003529 	.word	0x08003529
 800343c:	080033ed 	.word	0x080033ed
 8003440:	080033ed 	.word	0x080033ed
 8003444:	08003591 	.word	0x08003591
 8003448:	080033ed 	.word	0x080033ed
 800344c:	0800349b 	.word	0x0800349b
 8003450:	080033ed 	.word	0x080033ed
 8003454:	080033ed 	.word	0x080033ed
 8003458:	08003531 	.word	0x08003531
 800345c:	6833      	ldr	r3, [r6, #0]
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6032      	str	r2, [r6, #0]
 8003464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800346c:	2301      	movs	r3, #1
 800346e:	e09c      	b.n	80035aa <_printf_i+0x1e6>
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	1d19      	adds	r1, r3, #4
 8003476:	6031      	str	r1, [r6, #0]
 8003478:	0606      	lsls	r6, r0, #24
 800347a:	d501      	bpl.n	8003480 <_printf_i+0xbc>
 800347c:	681d      	ldr	r5, [r3, #0]
 800347e:	e003      	b.n	8003488 <_printf_i+0xc4>
 8003480:	0645      	lsls	r5, r0, #25
 8003482:	d5fb      	bpl.n	800347c <_printf_i+0xb8>
 8003484:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003488:	2d00      	cmp	r5, #0
 800348a:	da03      	bge.n	8003494 <_printf_i+0xd0>
 800348c:	232d      	movs	r3, #45	@ 0x2d
 800348e:	426d      	negs	r5, r5
 8003490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003494:	4858      	ldr	r0, [pc, #352]	@ (80035f8 <_printf_i+0x234>)
 8003496:	230a      	movs	r3, #10
 8003498:	e011      	b.n	80034be <_printf_i+0xfa>
 800349a:	6821      	ldr	r1, [r4, #0]
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	0608      	lsls	r0, r1, #24
 80034a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80034a4:	d402      	bmi.n	80034ac <_printf_i+0xe8>
 80034a6:	0649      	lsls	r1, r1, #25
 80034a8:	bf48      	it	mi
 80034aa:	b2ad      	uxthmi	r5, r5
 80034ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80034ae:	4852      	ldr	r0, [pc, #328]	@ (80035f8 <_printf_i+0x234>)
 80034b0:	6033      	str	r3, [r6, #0]
 80034b2:	bf14      	ite	ne
 80034b4:	230a      	movne	r3, #10
 80034b6:	2308      	moveq	r3, #8
 80034b8:	2100      	movs	r1, #0
 80034ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034be:	6866      	ldr	r6, [r4, #4]
 80034c0:	60a6      	str	r6, [r4, #8]
 80034c2:	2e00      	cmp	r6, #0
 80034c4:	db05      	blt.n	80034d2 <_printf_i+0x10e>
 80034c6:	6821      	ldr	r1, [r4, #0]
 80034c8:	432e      	orrs	r6, r5
 80034ca:	f021 0104 	bic.w	r1, r1, #4
 80034ce:	6021      	str	r1, [r4, #0]
 80034d0:	d04b      	beq.n	800356a <_printf_i+0x1a6>
 80034d2:	4616      	mov	r6, r2
 80034d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80034d8:	fb03 5711 	mls	r7, r3, r1, r5
 80034dc:	5dc7      	ldrb	r7, [r0, r7]
 80034de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034e2:	462f      	mov	r7, r5
 80034e4:	42bb      	cmp	r3, r7
 80034e6:	460d      	mov	r5, r1
 80034e8:	d9f4      	bls.n	80034d4 <_printf_i+0x110>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d10b      	bne.n	8003506 <_printf_i+0x142>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	07df      	lsls	r7, r3, #31
 80034f2:	d508      	bpl.n	8003506 <_printf_i+0x142>
 80034f4:	6923      	ldr	r3, [r4, #16]
 80034f6:	6861      	ldr	r1, [r4, #4]
 80034f8:	4299      	cmp	r1, r3
 80034fa:	bfde      	ittt	le
 80034fc:	2330      	movle	r3, #48	@ 0x30
 80034fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003502:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003506:	1b92      	subs	r2, r2, r6
 8003508:	6122      	str	r2, [r4, #16]
 800350a:	f8cd a000 	str.w	sl, [sp]
 800350e:	464b      	mov	r3, r9
 8003510:	aa03      	add	r2, sp, #12
 8003512:	4621      	mov	r1, r4
 8003514:	4640      	mov	r0, r8
 8003516:	f7ff fee7 	bl	80032e8 <_printf_common>
 800351a:	3001      	adds	r0, #1
 800351c:	d14a      	bne.n	80035b4 <_printf_i+0x1f0>
 800351e:	f04f 30ff 	mov.w	r0, #4294967295
 8003522:	b004      	add	sp, #16
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	4832      	ldr	r0, [pc, #200]	@ (80035fc <_printf_i+0x238>)
 8003532:	2778      	movs	r7, #120	@ 0x78
 8003534:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	6831      	ldr	r1, [r6, #0]
 800353c:	061f      	lsls	r7, r3, #24
 800353e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003542:	d402      	bmi.n	800354a <_printf_i+0x186>
 8003544:	065f      	lsls	r7, r3, #25
 8003546:	bf48      	it	mi
 8003548:	b2ad      	uxthmi	r5, r5
 800354a:	6031      	str	r1, [r6, #0]
 800354c:	07d9      	lsls	r1, r3, #31
 800354e:	bf44      	itt	mi
 8003550:	f043 0320 	orrmi.w	r3, r3, #32
 8003554:	6023      	strmi	r3, [r4, #0]
 8003556:	b11d      	cbz	r5, 8003560 <_printf_i+0x19c>
 8003558:	2310      	movs	r3, #16
 800355a:	e7ad      	b.n	80034b8 <_printf_i+0xf4>
 800355c:	4826      	ldr	r0, [pc, #152]	@ (80035f8 <_printf_i+0x234>)
 800355e:	e7e9      	b.n	8003534 <_printf_i+0x170>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	f023 0320 	bic.w	r3, r3, #32
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	e7f6      	b.n	8003558 <_printf_i+0x194>
 800356a:	4616      	mov	r6, r2
 800356c:	e7bd      	b.n	80034ea <_printf_i+0x126>
 800356e:	6833      	ldr	r3, [r6, #0]
 8003570:	6825      	ldr	r5, [r4, #0]
 8003572:	6961      	ldr	r1, [r4, #20]
 8003574:	1d18      	adds	r0, r3, #4
 8003576:	6030      	str	r0, [r6, #0]
 8003578:	062e      	lsls	r6, r5, #24
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	d501      	bpl.n	8003582 <_printf_i+0x1be>
 800357e:	6019      	str	r1, [r3, #0]
 8003580:	e002      	b.n	8003588 <_printf_i+0x1c4>
 8003582:	0668      	lsls	r0, r5, #25
 8003584:	d5fb      	bpl.n	800357e <_printf_i+0x1ba>
 8003586:	8019      	strh	r1, [r3, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	4616      	mov	r6, r2
 800358e:	e7bc      	b.n	800350a <_printf_i+0x146>
 8003590:	6833      	ldr	r3, [r6, #0]
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	6032      	str	r2, [r6, #0]
 8003596:	681e      	ldr	r6, [r3, #0]
 8003598:	6862      	ldr	r2, [r4, #4]
 800359a:	2100      	movs	r1, #0
 800359c:	4630      	mov	r0, r6
 800359e:	f7fc fe17 	bl	80001d0 <memchr>
 80035a2:	b108      	cbz	r0, 80035a8 <_printf_i+0x1e4>
 80035a4:	1b80      	subs	r0, r0, r6
 80035a6:	6060      	str	r0, [r4, #4]
 80035a8:	6863      	ldr	r3, [r4, #4]
 80035aa:	6123      	str	r3, [r4, #16]
 80035ac:	2300      	movs	r3, #0
 80035ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035b2:	e7aa      	b.n	800350a <_printf_i+0x146>
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	4632      	mov	r2, r6
 80035b8:	4649      	mov	r1, r9
 80035ba:	4640      	mov	r0, r8
 80035bc:	47d0      	blx	sl
 80035be:	3001      	adds	r0, #1
 80035c0:	d0ad      	beq.n	800351e <_printf_i+0x15a>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	079b      	lsls	r3, r3, #30
 80035c6:	d413      	bmi.n	80035f0 <_printf_i+0x22c>
 80035c8:	68e0      	ldr	r0, [r4, #12]
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	4298      	cmp	r0, r3
 80035ce:	bfb8      	it	lt
 80035d0:	4618      	movlt	r0, r3
 80035d2:	e7a6      	b.n	8003522 <_printf_i+0x15e>
 80035d4:	2301      	movs	r3, #1
 80035d6:	4632      	mov	r2, r6
 80035d8:	4649      	mov	r1, r9
 80035da:	4640      	mov	r0, r8
 80035dc:	47d0      	blx	sl
 80035de:	3001      	adds	r0, #1
 80035e0:	d09d      	beq.n	800351e <_printf_i+0x15a>
 80035e2:	3501      	adds	r5, #1
 80035e4:	68e3      	ldr	r3, [r4, #12]
 80035e6:	9903      	ldr	r1, [sp, #12]
 80035e8:	1a5b      	subs	r3, r3, r1
 80035ea:	42ab      	cmp	r3, r5
 80035ec:	dcf2      	bgt.n	80035d4 <_printf_i+0x210>
 80035ee:	e7eb      	b.n	80035c8 <_printf_i+0x204>
 80035f0:	2500      	movs	r5, #0
 80035f2:	f104 0619 	add.w	r6, r4, #25
 80035f6:	e7f5      	b.n	80035e4 <_printf_i+0x220>
 80035f8:	08005692 	.word	0x08005692
 80035fc:	080056a3 	.word	0x080056a3

08003600 <std>:
 8003600:	2300      	movs	r3, #0
 8003602:	b510      	push	{r4, lr}
 8003604:	4604      	mov	r4, r0
 8003606:	e9c0 3300 	strd	r3, r3, [r0]
 800360a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800360e:	6083      	str	r3, [r0, #8]
 8003610:	8181      	strh	r1, [r0, #12]
 8003612:	6643      	str	r3, [r0, #100]	@ 0x64
 8003614:	81c2      	strh	r2, [r0, #14]
 8003616:	6183      	str	r3, [r0, #24]
 8003618:	4619      	mov	r1, r3
 800361a:	2208      	movs	r2, #8
 800361c:	305c      	adds	r0, #92	@ 0x5c
 800361e:	f000 f8f4 	bl	800380a <memset>
 8003622:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <std+0x58>)
 8003624:	6263      	str	r3, [r4, #36]	@ 0x24
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <std+0x5c>)
 8003628:	62a3      	str	r3, [r4, #40]	@ 0x28
 800362a:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <std+0x60>)
 800362c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <std+0x64>)
 8003630:	6323      	str	r3, [r4, #48]	@ 0x30
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <std+0x68>)
 8003634:	6224      	str	r4, [r4, #32]
 8003636:	429c      	cmp	r4, r3
 8003638:	d006      	beq.n	8003648 <std+0x48>
 800363a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800363e:	4294      	cmp	r4, r2
 8003640:	d002      	beq.n	8003648 <std+0x48>
 8003642:	33d0      	adds	r3, #208	@ 0xd0
 8003644:	429c      	cmp	r4, r3
 8003646:	d105      	bne.n	8003654 <std+0x54>
 8003648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003650:	f000 b958 	b.w	8003904 <__retarget_lock_init_recursive>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	08003785 	.word	0x08003785
 800365c:	080037a7 	.word	0x080037a7
 8003660:	080037df 	.word	0x080037df
 8003664:	08003803 	.word	0x08003803
 8003668:	2000024c 	.word	0x2000024c

0800366c <stdio_exit_handler>:
 800366c:	4a02      	ldr	r2, [pc, #8]	@ (8003678 <stdio_exit_handler+0xc>)
 800366e:	4903      	ldr	r1, [pc, #12]	@ (800367c <stdio_exit_handler+0x10>)
 8003670:	4803      	ldr	r0, [pc, #12]	@ (8003680 <stdio_exit_handler+0x14>)
 8003672:	f000 b869 	b.w	8003748 <_fwalk_sglue>
 8003676:	bf00      	nop
 8003678:	2000000c 	.word	0x2000000c
 800367c:	08004fbd 	.word	0x08004fbd
 8003680:	2000001c 	.word	0x2000001c

08003684 <cleanup_stdio>:
 8003684:	6841      	ldr	r1, [r0, #4]
 8003686:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <cleanup_stdio+0x34>)
 8003688:	4299      	cmp	r1, r3
 800368a:	b510      	push	{r4, lr}
 800368c:	4604      	mov	r4, r0
 800368e:	d001      	beq.n	8003694 <cleanup_stdio+0x10>
 8003690:	f001 fc94 	bl	8004fbc <_fflush_r>
 8003694:	68a1      	ldr	r1, [r4, #8]
 8003696:	4b09      	ldr	r3, [pc, #36]	@ (80036bc <cleanup_stdio+0x38>)
 8003698:	4299      	cmp	r1, r3
 800369a:	d002      	beq.n	80036a2 <cleanup_stdio+0x1e>
 800369c:	4620      	mov	r0, r4
 800369e:	f001 fc8d 	bl	8004fbc <_fflush_r>
 80036a2:	68e1      	ldr	r1, [r4, #12]
 80036a4:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <cleanup_stdio+0x3c>)
 80036a6:	4299      	cmp	r1, r3
 80036a8:	d004      	beq.n	80036b4 <cleanup_stdio+0x30>
 80036aa:	4620      	mov	r0, r4
 80036ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036b0:	f001 bc84 	b.w	8004fbc <_fflush_r>
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	bf00      	nop
 80036b8:	2000024c 	.word	0x2000024c
 80036bc:	200002b4 	.word	0x200002b4
 80036c0:	2000031c 	.word	0x2000031c

080036c4 <global_stdio_init.part.0>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <global_stdio_init.part.0+0x30>)
 80036c8:	4c0b      	ldr	r4, [pc, #44]	@ (80036f8 <global_stdio_init.part.0+0x34>)
 80036ca:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <global_stdio_init.part.0+0x38>)
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	4620      	mov	r0, r4
 80036d0:	2200      	movs	r2, #0
 80036d2:	2104      	movs	r1, #4
 80036d4:	f7ff ff94 	bl	8003600 <std>
 80036d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036dc:	2201      	movs	r2, #1
 80036de:	2109      	movs	r1, #9
 80036e0:	f7ff ff8e 	bl	8003600 <std>
 80036e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036e8:	2202      	movs	r2, #2
 80036ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ee:	2112      	movs	r1, #18
 80036f0:	f7ff bf86 	b.w	8003600 <std>
 80036f4:	20000384 	.word	0x20000384
 80036f8:	2000024c 	.word	0x2000024c
 80036fc:	0800366d 	.word	0x0800366d

08003700 <__sfp_lock_acquire>:
 8003700:	4801      	ldr	r0, [pc, #4]	@ (8003708 <__sfp_lock_acquire+0x8>)
 8003702:	f000 b900 	b.w	8003906 <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	2000038d 	.word	0x2000038d

0800370c <__sfp_lock_release>:
 800370c:	4801      	ldr	r0, [pc, #4]	@ (8003714 <__sfp_lock_release+0x8>)
 800370e:	f000 b8fb 	b.w	8003908 <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	2000038d 	.word	0x2000038d

08003718 <__sinit>:
 8003718:	b510      	push	{r4, lr}
 800371a:	4604      	mov	r4, r0
 800371c:	f7ff fff0 	bl	8003700 <__sfp_lock_acquire>
 8003720:	6a23      	ldr	r3, [r4, #32]
 8003722:	b11b      	cbz	r3, 800372c <__sinit+0x14>
 8003724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003728:	f7ff bff0 	b.w	800370c <__sfp_lock_release>
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <__sinit+0x28>)
 800372e:	6223      	str	r3, [r4, #32]
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <__sinit+0x2c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f5      	bne.n	8003724 <__sinit+0xc>
 8003738:	f7ff ffc4 	bl	80036c4 <global_stdio_init.part.0>
 800373c:	e7f2      	b.n	8003724 <__sinit+0xc>
 800373e:	bf00      	nop
 8003740:	08003685 	.word	0x08003685
 8003744:	20000384 	.word	0x20000384

08003748 <_fwalk_sglue>:
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374c:	4607      	mov	r7, r0
 800374e:	4688      	mov	r8, r1
 8003750:	4614      	mov	r4, r2
 8003752:	2600      	movs	r6, #0
 8003754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003758:	f1b9 0901 	subs.w	r9, r9, #1
 800375c:	d505      	bpl.n	800376a <_fwalk_sglue+0x22>
 800375e:	6824      	ldr	r4, [r4, #0]
 8003760:	2c00      	cmp	r4, #0
 8003762:	d1f7      	bne.n	8003754 <_fwalk_sglue+0xc>
 8003764:	4630      	mov	r0, r6
 8003766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800376a:	89ab      	ldrh	r3, [r5, #12]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d907      	bls.n	8003780 <_fwalk_sglue+0x38>
 8003770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003774:	3301      	adds	r3, #1
 8003776:	d003      	beq.n	8003780 <_fwalk_sglue+0x38>
 8003778:	4629      	mov	r1, r5
 800377a:	4638      	mov	r0, r7
 800377c:	47c0      	blx	r8
 800377e:	4306      	orrs	r6, r0
 8003780:	3568      	adds	r5, #104	@ 0x68
 8003782:	e7e9      	b.n	8003758 <_fwalk_sglue+0x10>

08003784 <__sread>:
 8003784:	b510      	push	{r4, lr}
 8003786:	460c      	mov	r4, r1
 8003788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378c:	f000 f86c 	bl	8003868 <_read_r>
 8003790:	2800      	cmp	r0, #0
 8003792:	bfab      	itete	ge
 8003794:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003796:	89a3      	ldrhlt	r3, [r4, #12]
 8003798:	181b      	addge	r3, r3, r0
 800379a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800379e:	bfac      	ite	ge
 80037a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80037a2:	81a3      	strhlt	r3, [r4, #12]
 80037a4:	bd10      	pop	{r4, pc}

080037a6 <__swrite>:
 80037a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	461f      	mov	r7, r3
 80037ac:	898b      	ldrh	r3, [r1, #12]
 80037ae:	05db      	lsls	r3, r3, #23
 80037b0:	4605      	mov	r5, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	4616      	mov	r6, r2
 80037b6:	d505      	bpl.n	80037c4 <__swrite+0x1e>
 80037b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037bc:	2302      	movs	r3, #2
 80037be:	2200      	movs	r2, #0
 80037c0:	f000 f840 	bl	8003844 <_lseek_r>
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037ce:	81a3      	strh	r3, [r4, #12]
 80037d0:	4632      	mov	r2, r6
 80037d2:	463b      	mov	r3, r7
 80037d4:	4628      	mov	r0, r5
 80037d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037da:	f000 b857 	b.w	800388c <_write_r>

080037de <__sseek>:
 80037de:	b510      	push	{r4, lr}
 80037e0:	460c      	mov	r4, r1
 80037e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e6:	f000 f82d 	bl	8003844 <_lseek_r>
 80037ea:	1c43      	adds	r3, r0, #1
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	bf15      	itete	ne
 80037f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037fa:	81a3      	strheq	r3, [r4, #12]
 80037fc:	bf18      	it	ne
 80037fe:	81a3      	strhne	r3, [r4, #12]
 8003800:	bd10      	pop	{r4, pc}

08003802 <__sclose>:
 8003802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003806:	f000 b80d 	b.w	8003824 <_close_r>

0800380a <memset>:
 800380a:	4402      	add	r2, r0
 800380c:	4603      	mov	r3, r0
 800380e:	4293      	cmp	r3, r2
 8003810:	d100      	bne.n	8003814 <memset+0xa>
 8003812:	4770      	bx	lr
 8003814:	f803 1b01 	strb.w	r1, [r3], #1
 8003818:	e7f9      	b.n	800380e <memset+0x4>
	...

0800381c <_localeconv_r>:
 800381c:	4800      	ldr	r0, [pc, #0]	@ (8003820 <_localeconv_r+0x4>)
 800381e:	4770      	bx	lr
 8003820:	20000158 	.word	0x20000158

08003824 <_close_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d06      	ldr	r5, [pc, #24]	@ (8003840 <_close_r+0x1c>)
 8003828:	2300      	movs	r3, #0
 800382a:	4604      	mov	r4, r0
 800382c:	4608      	mov	r0, r1
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	f7fd fdec 	bl	800140c <_close>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_close_r+0x1a>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_close_r+0x1a>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	20000388 	.word	0x20000388

08003844 <_lseek_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d07      	ldr	r5, [pc, #28]	@ (8003864 <_lseek_r+0x20>)
 8003848:	4604      	mov	r4, r0
 800384a:	4608      	mov	r0, r1
 800384c:	4611      	mov	r1, r2
 800384e:	2200      	movs	r2, #0
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd fe01 	bl	800145a <_lseek>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_lseek_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_lseek_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000388 	.word	0x20000388

08003868 <_read_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4d07      	ldr	r5, [pc, #28]	@ (8003888 <_read_r+0x20>)
 800386c:	4604      	mov	r4, r0
 800386e:	4608      	mov	r0, r1
 8003870:	4611      	mov	r1, r2
 8003872:	2200      	movs	r2, #0
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fd fd8f 	bl	800139a <_read>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_read_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_read_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	20000388 	.word	0x20000388

0800388c <_write_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4d07      	ldr	r5, [pc, #28]	@ (80038ac <_write_r+0x20>)
 8003890:	4604      	mov	r4, r0
 8003892:	4608      	mov	r0, r1
 8003894:	4611      	mov	r1, r2
 8003896:	2200      	movs	r2, #0
 8003898:	602a      	str	r2, [r5, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	f7fd fd9a 	bl	80013d4 <_write>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <_write_r+0x1e>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b103      	cbz	r3, 80038aa <_write_r+0x1e>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	20000388 	.word	0x20000388

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	@ (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000018 	.word	0x20000018

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	@ (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	@ (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	@ (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003900 <__libc_init_array+0x44>)
 80038d0:	f001 fec2 	bl	8005658 <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	080059fc 	.word	0x080059fc
 80038f8:	080059fc 	.word	0x080059fc
 80038fc:	080059fc 	.word	0x080059fc
 8003900:	08005a00 	.word	0x08005a00

08003904 <__retarget_lock_init_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_acquire_recursive>:
 8003906:	4770      	bx	lr

08003908 <__retarget_lock_release_recursive>:
 8003908:	4770      	bx	lr

0800390a <quorem>:
 800390a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390e:	6903      	ldr	r3, [r0, #16]
 8003910:	690c      	ldr	r4, [r1, #16]
 8003912:	42a3      	cmp	r3, r4
 8003914:	4607      	mov	r7, r0
 8003916:	db7e      	blt.n	8003a16 <quorem+0x10c>
 8003918:	3c01      	subs	r4, #1
 800391a:	f101 0814 	add.w	r8, r1, #20
 800391e:	00a3      	lsls	r3, r4, #2
 8003920:	f100 0514 	add.w	r5, r0, #20
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003934:	3301      	adds	r3, #1
 8003936:	429a      	cmp	r2, r3
 8003938:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800393c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003940:	d32e      	bcc.n	80039a0 <quorem+0x96>
 8003942:	f04f 0a00 	mov.w	sl, #0
 8003946:	46c4      	mov	ip, r8
 8003948:	46ae      	mov	lr, r5
 800394a:	46d3      	mov	fp, sl
 800394c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003950:	b298      	uxth	r0, r3
 8003952:	fb06 a000 	mla	r0, r6, r0, sl
 8003956:	0c02      	lsrs	r2, r0, #16
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	fb06 2303 	mla	r3, r6, r3, r2
 800395e:	f8de 2000 	ldr.w	r2, [lr]
 8003962:	b280      	uxth	r0, r0
 8003964:	b292      	uxth	r2, r2
 8003966:	1a12      	subs	r2, r2, r0
 8003968:	445a      	add	r2, fp
 800396a:	f8de 0000 	ldr.w	r0, [lr]
 800396e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003972:	b29b      	uxth	r3, r3
 8003974:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003978:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800397c:	b292      	uxth	r2, r2
 800397e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003982:	45e1      	cmp	r9, ip
 8003984:	f84e 2b04 	str.w	r2, [lr], #4
 8003988:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800398c:	d2de      	bcs.n	800394c <quorem+0x42>
 800398e:	9b00      	ldr	r3, [sp, #0]
 8003990:	58eb      	ldr	r3, [r5, r3]
 8003992:	b92b      	cbnz	r3, 80039a0 <quorem+0x96>
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	3b04      	subs	r3, #4
 8003998:	429d      	cmp	r5, r3
 800399a:	461a      	mov	r2, r3
 800399c:	d32f      	bcc.n	80039fe <quorem+0xf4>
 800399e:	613c      	str	r4, [r7, #16]
 80039a0:	4638      	mov	r0, r7
 80039a2:	f001 f97f 	bl	8004ca4 <__mcmp>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	db25      	blt.n	80039f6 <quorem+0xec>
 80039aa:	4629      	mov	r1, r5
 80039ac:	2000      	movs	r0, #0
 80039ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80039b2:	f8d1 c000 	ldr.w	ip, [r1]
 80039b6:	fa1f fe82 	uxth.w	lr, r2
 80039ba:	fa1f f38c 	uxth.w	r3, ip
 80039be:	eba3 030e 	sub.w	r3, r3, lr
 80039c2:	4403      	add	r3, r0
 80039c4:	0c12      	lsrs	r2, r2, #16
 80039c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80039ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039d4:	45c1      	cmp	r9, r8
 80039d6:	f841 3b04 	str.w	r3, [r1], #4
 80039da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80039de:	d2e6      	bcs.n	80039ae <quorem+0xa4>
 80039e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039e8:	b922      	cbnz	r2, 80039f4 <quorem+0xea>
 80039ea:	3b04      	subs	r3, #4
 80039ec:	429d      	cmp	r5, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	d30b      	bcc.n	8003a0a <quorem+0x100>
 80039f2:	613c      	str	r4, [r7, #16]
 80039f4:	3601      	adds	r6, #1
 80039f6:	4630      	mov	r0, r6
 80039f8:	b003      	add	sp, #12
 80039fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	3b04      	subs	r3, #4
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	d1cb      	bne.n	800399e <quorem+0x94>
 8003a06:	3c01      	subs	r4, #1
 8003a08:	e7c6      	b.n	8003998 <quorem+0x8e>
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	3b04      	subs	r3, #4
 8003a0e:	2a00      	cmp	r2, #0
 8003a10:	d1ef      	bne.n	80039f2 <quorem+0xe8>
 8003a12:	3c01      	subs	r4, #1
 8003a14:	e7ea      	b.n	80039ec <quorem+0xe2>
 8003a16:	2000      	movs	r0, #0
 8003a18:	e7ee      	b.n	80039f8 <quorem+0xee>
 8003a1a:	0000      	movs	r0, r0
 8003a1c:	0000      	movs	r0, r0
	...

08003a20 <_dtoa_r>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	69c7      	ldr	r7, [r0, #28]
 8003a26:	b097      	sub	sp, #92	@ 0x5c
 8003a28:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003a2c:	ec55 4b10 	vmov	r4, r5, d0
 8003a30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003a32:	9107      	str	r1, [sp, #28]
 8003a34:	4681      	mov	r9, r0
 8003a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8003a38:	9311      	str	r3, [sp, #68]	@ 0x44
 8003a3a:	b97f      	cbnz	r7, 8003a5c <_dtoa_r+0x3c>
 8003a3c:	2010      	movs	r0, #16
 8003a3e:	f000 fe09 	bl	8004654 <malloc>
 8003a42:	4602      	mov	r2, r0
 8003a44:	f8c9 001c 	str.w	r0, [r9, #28]
 8003a48:	b920      	cbnz	r0, 8003a54 <_dtoa_r+0x34>
 8003a4a:	4ba9      	ldr	r3, [pc, #676]	@ (8003cf0 <_dtoa_r+0x2d0>)
 8003a4c:	21ef      	movs	r1, #239	@ 0xef
 8003a4e:	48a9      	ldr	r0, [pc, #676]	@ (8003cf4 <_dtoa_r+0x2d4>)
 8003a50:	f001 fafa 	bl	8005048 <__assert_func>
 8003a54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003a58:	6007      	str	r7, [r0, #0]
 8003a5a:	60c7      	str	r7, [r0, #12]
 8003a5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	b159      	cbz	r1, 8003a7c <_dtoa_r+0x5c>
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	604a      	str	r2, [r1, #4]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4093      	lsls	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
 8003a6e:	4648      	mov	r0, r9
 8003a70:	f000 fee6 	bl	8004840 <_Bfree>
 8003a74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	1e2b      	subs	r3, r5, #0
 8003a7e:	bfb9      	ittee	lt
 8003a80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003a84:	9305      	strlt	r3, [sp, #20]
 8003a86:	2300      	movge	r3, #0
 8003a88:	6033      	strge	r3, [r6, #0]
 8003a8a:	9f05      	ldr	r7, [sp, #20]
 8003a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8003cf8 <_dtoa_r+0x2d8>)
 8003a8e:	bfbc      	itt	lt
 8003a90:	2201      	movlt	r2, #1
 8003a92:	6032      	strlt	r2, [r6, #0]
 8003a94:	43bb      	bics	r3, r7
 8003a96:	d112      	bne.n	8003abe <_dtoa_r+0x9e>
 8003a98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003a9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003aa4:	4323      	orrs	r3, r4
 8003aa6:	f000 855a 	beq.w	800455e <_dtoa_r+0xb3e>
 8003aaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003aac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003d0c <_dtoa_r+0x2ec>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 855c 	beq.w	800456e <_dtoa_r+0xb4e>
 8003ab6:	f10a 0303 	add.w	r3, sl, #3
 8003aba:	f000 bd56 	b.w	800456a <_dtoa_r+0xb4a>
 8003abe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	ec51 0b17 	vmov	r0, r1, d7
 8003ac8:	2300      	movs	r3, #0
 8003aca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003ace:	f7fc fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ad2:	4680      	mov	r8, r0
 8003ad4:	b158      	cbz	r0, 8003aee <_dtoa_r+0xce>
 8003ad6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ade:	b113      	cbz	r3, 8003ae6 <_dtoa_r+0xc6>
 8003ae0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003ae2:	4b86      	ldr	r3, [pc, #536]	@ (8003cfc <_dtoa_r+0x2dc>)
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003d10 <_dtoa_r+0x2f0>
 8003aea:	f000 bd40 	b.w	800456e <_dtoa_r+0xb4e>
 8003aee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003af2:	aa14      	add	r2, sp, #80	@ 0x50
 8003af4:	a915      	add	r1, sp, #84	@ 0x54
 8003af6:	4648      	mov	r0, r9
 8003af8:	f001 f984 	bl	8004e04 <__d2b>
 8003afc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003b00:	9002      	str	r0, [sp, #8]
 8003b02:	2e00      	cmp	r6, #0
 8003b04:	d078      	beq.n	8003bf8 <_dtoa_r+0x1d8>
 8003b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003b08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003b18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003b1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003b20:	4619      	mov	r1, r3
 8003b22:	2200      	movs	r2, #0
 8003b24:	4b76      	ldr	r3, [pc, #472]	@ (8003d00 <_dtoa_r+0x2e0>)
 8003b26:	f7fc fbaf 	bl	8000288 <__aeabi_dsub>
 8003b2a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003cd8 <_dtoa_r+0x2b8>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc fd62 	bl	80005f8 <__aeabi_dmul>
 8003b34:	a36a      	add	r3, pc, #424	@ (adr r3, 8003ce0 <_dtoa_r+0x2c0>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fba7 	bl	800028c <__adddf3>
 8003b3e:	4604      	mov	r4, r0
 8003b40:	4630      	mov	r0, r6
 8003b42:	460d      	mov	r5, r1
 8003b44:	f7fc fcee 	bl	8000524 <__aeabi_i2d>
 8003b48:	a367      	add	r3, pc, #412	@ (adr r3, 8003ce8 <_dtoa_r+0x2c8>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fd53 	bl	80005f8 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4620      	mov	r0, r4
 8003b58:	4629      	mov	r1, r5
 8003b5a:	f7fc fb97 	bl	800028c <__adddf3>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	460d      	mov	r5, r1
 8003b62:	f7fc fff9 	bl	8000b58 <__aeabi_d2iz>
 8003b66:	2200      	movs	r2, #0
 8003b68:	4607      	mov	r7, r0
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc ffb4 	bl	8000adc <__aeabi_dcmplt>
 8003b74:	b140      	cbz	r0, 8003b88 <_dtoa_r+0x168>
 8003b76:	4638      	mov	r0, r7
 8003b78:	f7fc fcd4 	bl	8000524 <__aeabi_i2d>
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	462b      	mov	r3, r5
 8003b80:	f7fc ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b84:	b900      	cbnz	r0, 8003b88 <_dtoa_r+0x168>
 8003b86:	3f01      	subs	r7, #1
 8003b88:	2f16      	cmp	r7, #22
 8003b8a:	d852      	bhi.n	8003c32 <_dtoa_r+0x212>
 8003b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8003d04 <_dtoa_r+0x2e4>)
 8003b8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b9a:	f7fc ff9f 	bl	8000adc <__aeabi_dcmplt>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d049      	beq.n	8003c36 <_dtoa_r+0x216>
 8003ba2:	3f01      	subs	r7, #1
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9310      	str	r3, [sp, #64]	@ 0x40
 8003ba8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003baa:	1b9b      	subs	r3, r3, r6
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	bf45      	ittet	mi
 8003bb0:	f1c3 0301 	rsbmi	r3, r3, #1
 8003bb4:	9300      	strmi	r3, [sp, #0]
 8003bb6:	2300      	movpl	r3, #0
 8003bb8:	2300      	movmi	r3, #0
 8003bba:	9206      	str	r2, [sp, #24]
 8003bbc:	bf54      	ite	pl
 8003bbe:	9300      	strpl	r3, [sp, #0]
 8003bc0:	9306      	strmi	r3, [sp, #24]
 8003bc2:	2f00      	cmp	r7, #0
 8003bc4:	db39      	blt.n	8003c3a <_dtoa_r+0x21a>
 8003bc6:	9b06      	ldr	r3, [sp, #24]
 8003bc8:	970d      	str	r7, [sp, #52]	@ 0x34
 8003bca:	443b      	add	r3, r7
 8003bcc:	9306      	str	r3, [sp, #24]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9308      	str	r3, [sp, #32]
 8003bd2:	9b07      	ldr	r3, [sp, #28]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d863      	bhi.n	8003ca0 <_dtoa_r+0x280>
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	bfc4      	itt	gt
 8003bdc:	3b04      	subgt	r3, #4
 8003bde:	9307      	strgt	r3, [sp, #28]
 8003be0:	9b07      	ldr	r3, [sp, #28]
 8003be2:	f1a3 0302 	sub.w	r3, r3, #2
 8003be6:	bfcc      	ite	gt
 8003be8:	2400      	movgt	r4, #0
 8003bea:	2401      	movle	r4, #1
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d863      	bhi.n	8003cb8 <_dtoa_r+0x298>
 8003bf0:	e8df f003 	tbb	[pc, r3]
 8003bf4:	2b375452 	.word	0x2b375452
 8003bf8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003bfc:	441e      	add	r6, r3
 8003bfe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	bfc1      	itttt	gt
 8003c06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003c0a:	409f      	lslgt	r7, r3
 8003c0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003c10:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003c14:	bfd6      	itet	le
 8003c16:	f1c3 0320 	rsble	r3, r3, #32
 8003c1a:	ea47 0003 	orrgt.w	r0, r7, r3
 8003c1e:	fa04 f003 	lslle.w	r0, r4, r3
 8003c22:	f7fc fc6f 	bl	8000504 <__aeabi_ui2d>
 8003c26:	2201      	movs	r2, #1
 8003c28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003c2c:	3e01      	subs	r6, #1
 8003c2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8003c30:	e776      	b.n	8003b20 <_dtoa_r+0x100>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e7b7      	b.n	8003ba6 <_dtoa_r+0x186>
 8003c36:	9010      	str	r0, [sp, #64]	@ 0x40
 8003c38:	e7b6      	b.n	8003ba8 <_dtoa_r+0x188>
 8003c3a:	9b00      	ldr	r3, [sp, #0]
 8003c3c:	1bdb      	subs	r3, r3, r7
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	427b      	negs	r3, r7
 8003c42:	9308      	str	r3, [sp, #32]
 8003c44:	2300      	movs	r3, #0
 8003c46:	930d      	str	r3, [sp, #52]	@ 0x34
 8003c48:	e7c3      	b.n	8003bd2 <_dtoa_r+0x1b2>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003c50:	eb07 0b03 	add.w	fp, r7, r3
 8003c54:	f10b 0301 	add.w	r3, fp, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	9303      	str	r3, [sp, #12]
 8003c5c:	bfb8      	it	lt
 8003c5e:	2301      	movlt	r3, #1
 8003c60:	e006      	b.n	8003c70 <_dtoa_r+0x250>
 8003c62:	2301      	movs	r3, #1
 8003c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	dd28      	ble.n	8003cbe <_dtoa_r+0x29e>
 8003c6c:	469b      	mov	fp, r3
 8003c6e:	9303      	str	r3, [sp, #12]
 8003c70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003c74:	2100      	movs	r1, #0
 8003c76:	2204      	movs	r2, #4
 8003c78:	f102 0514 	add.w	r5, r2, #20
 8003c7c:	429d      	cmp	r5, r3
 8003c7e:	d926      	bls.n	8003cce <_dtoa_r+0x2ae>
 8003c80:	6041      	str	r1, [r0, #4]
 8003c82:	4648      	mov	r0, r9
 8003c84:	f000 fd9c 	bl	80047c0 <_Balloc>
 8003c88:	4682      	mov	sl, r0
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d142      	bne.n	8003d14 <_dtoa_r+0x2f4>
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <_dtoa_r+0x2e8>)
 8003c90:	4602      	mov	r2, r0
 8003c92:	f240 11af 	movw	r1, #431	@ 0x1af
 8003c96:	e6da      	b.n	8003a4e <_dtoa_r+0x2e>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e7e3      	b.n	8003c64 <_dtoa_r+0x244>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e7d5      	b.n	8003c4c <_dtoa_r+0x22c>
 8003ca0:	2401      	movs	r4, #1
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9307      	str	r3, [sp, #28]
 8003ca6:	9409      	str	r4, [sp, #36]	@ 0x24
 8003ca8:	f04f 3bff 	mov.w	fp, #4294967295
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8cd b00c 	str.w	fp, [sp, #12]
 8003cb2:	2312      	movs	r3, #18
 8003cb4:	920c      	str	r2, [sp, #48]	@ 0x30
 8003cb6:	e7db      	b.n	8003c70 <_dtoa_r+0x250>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cbc:	e7f4      	b.n	8003ca8 <_dtoa_r+0x288>
 8003cbe:	f04f 0b01 	mov.w	fp, #1
 8003cc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8003cc6:	465b      	mov	r3, fp
 8003cc8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003ccc:	e7d0      	b.n	8003c70 <_dtoa_r+0x250>
 8003cce:	3101      	adds	r1, #1
 8003cd0:	0052      	lsls	r2, r2, #1
 8003cd2:	e7d1      	b.n	8003c78 <_dtoa_r+0x258>
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	636f4361 	.word	0x636f4361
 8003cdc:	3fd287a7 	.word	0x3fd287a7
 8003ce0:	8b60c8b3 	.word	0x8b60c8b3
 8003ce4:	3fc68a28 	.word	0x3fc68a28
 8003ce8:	509f79fb 	.word	0x509f79fb
 8003cec:	3fd34413 	.word	0x3fd34413
 8003cf0:	080056c1 	.word	0x080056c1
 8003cf4:	080056d8 	.word	0x080056d8
 8003cf8:	7ff00000 	.word	0x7ff00000
 8003cfc:	08005691 	.word	0x08005691
 8003d00:	3ff80000 	.word	0x3ff80000
 8003d04:	08005828 	.word	0x08005828
 8003d08:	08005730 	.word	0x08005730
 8003d0c:	080056bd 	.word	0x080056bd
 8003d10:	08005690 	.word	0x08005690
 8003d14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d18:	6018      	str	r0, [r3, #0]
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	2b0e      	cmp	r3, #14
 8003d1e:	f200 80a1 	bhi.w	8003e64 <_dtoa_r+0x444>
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	f000 809e 	beq.w	8003e64 <_dtoa_r+0x444>
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	dd33      	ble.n	8003d94 <_dtoa_r+0x374>
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa0 <_dtoa_r+0x580>)
 8003d2e:	f007 020f 	and.w	r2, r7, #15
 8003d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d36:	ed93 7b00 	vldr	d7, [r3]
 8003d3a:	05f8      	lsls	r0, r7, #23
 8003d3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003d40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003d44:	d516      	bpl.n	8003d74 <_dtoa_r+0x354>
 8003d46:	4b97      	ldr	r3, [pc, #604]	@ (8003fa4 <_dtoa_r+0x584>)
 8003d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d50:	f7fc fd7c 	bl	800084c <__aeabi_ddiv>
 8003d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d58:	f004 040f 	and.w	r4, r4, #15
 8003d5c:	2603      	movs	r6, #3
 8003d5e:	4d91      	ldr	r5, [pc, #580]	@ (8003fa4 <_dtoa_r+0x584>)
 8003d60:	b954      	cbnz	r4, 8003d78 <_dtoa_r+0x358>
 8003d62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d6a:	f7fc fd6f 	bl	800084c <__aeabi_ddiv>
 8003d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d72:	e028      	b.n	8003dc6 <_dtoa_r+0x3a6>
 8003d74:	2602      	movs	r6, #2
 8003d76:	e7f2      	b.n	8003d5e <_dtoa_r+0x33e>
 8003d78:	07e1      	lsls	r1, r4, #31
 8003d7a:	d508      	bpl.n	8003d8e <_dtoa_r+0x36e>
 8003d7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003d80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d84:	f7fc fc38 	bl	80005f8 <__aeabi_dmul>
 8003d88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	1064      	asrs	r4, r4, #1
 8003d90:	3508      	adds	r5, #8
 8003d92:	e7e5      	b.n	8003d60 <_dtoa_r+0x340>
 8003d94:	f000 80af 	beq.w	8003ef6 <_dtoa_r+0x4d6>
 8003d98:	427c      	negs	r4, r7
 8003d9a:	4b81      	ldr	r3, [pc, #516]	@ (8003fa0 <_dtoa_r+0x580>)
 8003d9c:	4d81      	ldr	r5, [pc, #516]	@ (8003fa4 <_dtoa_r+0x584>)
 8003d9e:	f004 020f 	and.w	r2, r4, #15
 8003da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003dae:	f7fc fc23 	bl	80005f8 <__aeabi_dmul>
 8003db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003db6:	1124      	asrs	r4, r4, #4
 8003db8:	2300      	movs	r3, #0
 8003dba:	2602      	movs	r6, #2
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	f040 808f 	bne.w	8003ee0 <_dtoa_r+0x4c0>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1d3      	bne.n	8003d6e <_dtoa_r+0x34e>
 8003dc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003dc8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8094 	beq.w	8003efa <_dtoa_r+0x4da>
 8003dd2:	4b75      	ldr	r3, [pc, #468]	@ (8003fa8 <_dtoa_r+0x588>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fe7f 	bl	8000adc <__aeabi_dcmplt>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f000 808b 	beq.w	8003efa <_dtoa_r+0x4da>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8087 	beq.w	8003efa <_dtoa_r+0x4da>
 8003dec:	f1bb 0f00 	cmp.w	fp, #0
 8003df0:	dd34      	ble.n	8003e5c <_dtoa_r+0x43c>
 8003df2:	4620      	mov	r0, r4
 8003df4:	4b6d      	ldr	r3, [pc, #436]	@ (8003fac <_dtoa_r+0x58c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f7fc fbfd 	bl	80005f8 <__aeabi_dmul>
 8003dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e02:	f107 38ff 	add.w	r8, r7, #4294967295
 8003e06:	3601      	adds	r6, #1
 8003e08:	465c      	mov	r4, fp
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f7fc fb8a 	bl	8000524 <__aeabi_i2d>
 8003e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e14:	f7fc fbf0 	bl	80005f8 <__aeabi_dmul>
 8003e18:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <_dtoa_r+0x590>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f7fc fa36 	bl	800028c <__adddf3>
 8003e20:	4605      	mov	r5, r0
 8003e22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d16a      	bne.n	8003f00 <_dtoa_r+0x4e0>
 8003e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e2e:	4b61      	ldr	r3, [pc, #388]	@ (8003fb4 <_dtoa_r+0x594>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	f7fc fa29 	bl	8000288 <__aeabi_dsub>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e3e:	462a      	mov	r2, r5
 8003e40:	4633      	mov	r3, r6
 8003e42:	f7fc fe69 	bl	8000b18 <__aeabi_dcmpgt>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	f040 8298 	bne.w	800437c <_dtoa_r+0x95c>
 8003e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e50:	462a      	mov	r2, r5
 8003e52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003e56:	f7fc fe41 	bl	8000adc <__aeabi_dcmplt>
 8003e5a:	bb38      	cbnz	r0, 8003eac <_dtoa_r+0x48c>
 8003e5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003e60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f2c0 8157 	blt.w	800411a <_dtoa_r+0x6fa>
 8003e6c:	2f0e      	cmp	r7, #14
 8003e6e:	f300 8154 	bgt.w	800411a <_dtoa_r+0x6fa>
 8003e72:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa0 <_dtoa_r+0x580>)
 8003e74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e78:	ed93 7b00 	vldr	d7, [r3]
 8003e7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	ed8d 7b00 	vstr	d7, [sp]
 8003e84:	f280 80e5 	bge.w	8004052 <_dtoa_r+0x632>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f300 80e1 	bgt.w	8004052 <_dtoa_r+0x632>
 8003e90:	d10c      	bne.n	8003eac <_dtoa_r+0x48c>
 8003e92:	4b48      	ldr	r3, [pc, #288]	@ (8003fb4 <_dtoa_r+0x594>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	ec51 0b17 	vmov	r0, r1, d7
 8003e9a:	f7fc fbad 	bl	80005f8 <__aeabi_dmul>
 8003e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ea2:	f7fc fe2f 	bl	8000b04 <__aeabi_dcmpge>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	f000 8266 	beq.w	8004378 <_dtoa_r+0x958>
 8003eac:	2400      	movs	r4, #0
 8003eae:	4625      	mov	r5, r4
 8003eb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003eb2:	4656      	mov	r6, sl
 8003eb4:	ea6f 0803 	mvn.w	r8, r3
 8003eb8:	2700      	movs	r7, #0
 8003eba:	4621      	mov	r1, r4
 8003ebc:	4648      	mov	r0, r9
 8003ebe:	f000 fcbf 	bl	8004840 <_Bfree>
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	f000 80bd 	beq.w	8004042 <_dtoa_r+0x622>
 8003ec8:	b12f      	cbz	r7, 8003ed6 <_dtoa_r+0x4b6>
 8003eca:	42af      	cmp	r7, r5
 8003ecc:	d003      	beq.n	8003ed6 <_dtoa_r+0x4b6>
 8003ece:	4639      	mov	r1, r7
 8003ed0:	4648      	mov	r0, r9
 8003ed2:	f000 fcb5 	bl	8004840 <_Bfree>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4648      	mov	r0, r9
 8003eda:	f000 fcb1 	bl	8004840 <_Bfree>
 8003ede:	e0b0      	b.n	8004042 <_dtoa_r+0x622>
 8003ee0:	07e2      	lsls	r2, r4, #31
 8003ee2:	d505      	bpl.n	8003ef0 <_dtoa_r+0x4d0>
 8003ee4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ee8:	f7fc fb86 	bl	80005f8 <__aeabi_dmul>
 8003eec:	3601      	adds	r6, #1
 8003eee:	2301      	movs	r3, #1
 8003ef0:	1064      	asrs	r4, r4, #1
 8003ef2:	3508      	adds	r5, #8
 8003ef4:	e762      	b.n	8003dbc <_dtoa_r+0x39c>
 8003ef6:	2602      	movs	r6, #2
 8003ef8:	e765      	b.n	8003dc6 <_dtoa_r+0x3a6>
 8003efa:	9c03      	ldr	r4, [sp, #12]
 8003efc:	46b8      	mov	r8, r7
 8003efe:	e784      	b.n	8003e0a <_dtoa_r+0x3ea>
 8003f00:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <_dtoa_r+0x580>)
 8003f02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003f04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f0c:	4454      	add	r4, sl
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	d054      	beq.n	8003fbc <_dtoa_r+0x59c>
 8003f12:	4929      	ldr	r1, [pc, #164]	@ (8003fb8 <_dtoa_r+0x598>)
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7fc fc99 	bl	800084c <__aeabi_ddiv>
 8003f1a:	4633      	mov	r3, r6
 8003f1c:	462a      	mov	r2, r5
 8003f1e:	f7fc f9b3 	bl	8000288 <__aeabi_dsub>
 8003f22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003f26:	4656      	mov	r6, sl
 8003f28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f2c:	f7fc fe14 	bl	8000b58 <__aeabi_d2iz>
 8003f30:	4605      	mov	r5, r0
 8003f32:	f7fc faf7 	bl	8000524 <__aeabi_i2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f3e:	f7fc f9a3 	bl	8000288 <__aeabi_dsub>
 8003f42:	3530      	adds	r5, #48	@ 0x30
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f4c:	f806 5b01 	strb.w	r5, [r6], #1
 8003f50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003f54:	f7fc fdc2 	bl	8000adc <__aeabi_dcmplt>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d172      	bne.n	8004042 <_dtoa_r+0x622>
 8003f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f60:	4911      	ldr	r1, [pc, #68]	@ (8003fa8 <_dtoa_r+0x588>)
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fc f990 	bl	8000288 <__aeabi_dsub>
 8003f68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003f6c:	f7fc fdb6 	bl	8000adc <__aeabi_dcmplt>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	f040 80b4 	bne.w	80040de <_dtoa_r+0x6be>
 8003f76:	42a6      	cmp	r6, r4
 8003f78:	f43f af70 	beq.w	8003e5c <_dtoa_r+0x43c>
 8003f7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <_dtoa_r+0x58c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	f7fc fb38 	bl	80005f8 <__aeabi_dmul>
 8003f88:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <_dtoa_r+0x58c>)
 8003f8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003f8e:	2200      	movs	r2, #0
 8003f90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f94:	f7fc fb30 	bl	80005f8 <__aeabi_dmul>
 8003f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f9c:	e7c4      	b.n	8003f28 <_dtoa_r+0x508>
 8003f9e:	bf00      	nop
 8003fa0:	08005828 	.word	0x08005828
 8003fa4:	08005800 	.word	0x08005800
 8003fa8:	3ff00000 	.word	0x3ff00000
 8003fac:	40240000 	.word	0x40240000
 8003fb0:	401c0000 	.word	0x401c0000
 8003fb4:	40140000 	.word	0x40140000
 8003fb8:	3fe00000 	.word	0x3fe00000
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f7fc fb1a 	bl	80005f8 <__aeabi_dmul>
 8003fc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003fc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003fca:	4656      	mov	r6, sl
 8003fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fd0:	f7fc fdc2 	bl	8000b58 <__aeabi_d2iz>
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	f7fc faa5 	bl	8000524 <__aeabi_i2d>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fe2:	f7fc f951 	bl	8000288 <__aeabi_dsub>
 8003fe6:	3530      	adds	r5, #48	@ 0x30
 8003fe8:	f806 5b01 	strb.w	r5, [r6], #1
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	42a6      	cmp	r6, r4
 8003ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	d124      	bne.n	8004046 <_dtoa_r+0x626>
 8003ffc:	4baf      	ldr	r3, [pc, #700]	@ (80042bc <_dtoa_r+0x89c>)
 8003ffe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004002:	f7fc f943 	bl	800028c <__adddf3>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800400e:	f7fc fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8004012:	2800      	cmp	r0, #0
 8004014:	d163      	bne.n	80040de <_dtoa_r+0x6be>
 8004016:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800401a:	49a8      	ldr	r1, [pc, #672]	@ (80042bc <_dtoa_r+0x89c>)
 800401c:	2000      	movs	r0, #0
 800401e:	f7fc f933 	bl	8000288 <__aeabi_dsub>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800402a:	f7fc fd57 	bl	8000adc <__aeabi_dcmplt>
 800402e:	2800      	cmp	r0, #0
 8004030:	f43f af14 	beq.w	8003e5c <_dtoa_r+0x43c>
 8004034:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004036:	1e73      	subs	r3, r6, #1
 8004038:	9313      	str	r3, [sp, #76]	@ 0x4c
 800403a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800403e:	2b30      	cmp	r3, #48	@ 0x30
 8004040:	d0f8      	beq.n	8004034 <_dtoa_r+0x614>
 8004042:	4647      	mov	r7, r8
 8004044:	e03b      	b.n	80040be <_dtoa_r+0x69e>
 8004046:	4b9e      	ldr	r3, [pc, #632]	@ (80042c0 <_dtoa_r+0x8a0>)
 8004048:	f7fc fad6 	bl	80005f8 <__aeabi_dmul>
 800404c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004050:	e7bc      	b.n	8003fcc <_dtoa_r+0x5ac>
 8004052:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004056:	4656      	mov	r6, sl
 8004058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800405c:	4620      	mov	r0, r4
 800405e:	4629      	mov	r1, r5
 8004060:	f7fc fbf4 	bl	800084c <__aeabi_ddiv>
 8004064:	f7fc fd78 	bl	8000b58 <__aeabi_d2iz>
 8004068:	4680      	mov	r8, r0
 800406a:	f7fc fa5b 	bl	8000524 <__aeabi_i2d>
 800406e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004072:	f7fc fac1 	bl	80005f8 <__aeabi_dmul>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004082:	f7fc f901 	bl	8000288 <__aeabi_dsub>
 8004086:	f806 4b01 	strb.w	r4, [r6], #1
 800408a:	9d03      	ldr	r5, [sp, #12]
 800408c:	eba6 040a 	sub.w	r4, r6, sl
 8004090:	42a5      	cmp	r5, r4
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	d133      	bne.n	8004100 <_dtoa_r+0x6e0>
 8004098:	f7fc f8f8 	bl	800028c <__adddf3>
 800409c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040a0:	4604      	mov	r4, r0
 80040a2:	460d      	mov	r5, r1
 80040a4:	f7fc fd38 	bl	8000b18 <__aeabi_dcmpgt>
 80040a8:	b9c0      	cbnz	r0, 80040dc <_dtoa_r+0x6bc>
 80040aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040ae:	4620      	mov	r0, r4
 80040b0:	4629      	mov	r1, r5
 80040b2:	f7fc fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80040b6:	b110      	cbz	r0, 80040be <_dtoa_r+0x69e>
 80040b8:	f018 0f01 	tst.w	r8, #1
 80040bc:	d10e      	bne.n	80040dc <_dtoa_r+0x6bc>
 80040be:	9902      	ldr	r1, [sp, #8]
 80040c0:	4648      	mov	r0, r9
 80040c2:	f000 fbbd 	bl	8004840 <_Bfree>
 80040c6:	2300      	movs	r3, #0
 80040c8:	7033      	strb	r3, [r6, #0]
 80040ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040cc:	3701      	adds	r7, #1
 80040ce:	601f      	str	r7, [r3, #0]
 80040d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 824b 	beq.w	800456e <_dtoa_r+0xb4e>
 80040d8:	601e      	str	r6, [r3, #0]
 80040da:	e248      	b.n	800456e <_dtoa_r+0xb4e>
 80040dc:	46b8      	mov	r8, r7
 80040de:	4633      	mov	r3, r6
 80040e0:	461e      	mov	r6, r3
 80040e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040e6:	2a39      	cmp	r2, #57	@ 0x39
 80040e8:	d106      	bne.n	80040f8 <_dtoa_r+0x6d8>
 80040ea:	459a      	cmp	sl, r3
 80040ec:	d1f8      	bne.n	80040e0 <_dtoa_r+0x6c0>
 80040ee:	2230      	movs	r2, #48	@ 0x30
 80040f0:	f108 0801 	add.w	r8, r8, #1
 80040f4:	f88a 2000 	strb.w	r2, [sl]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	3201      	adds	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e7a0      	b.n	8004042 <_dtoa_r+0x622>
 8004100:	4b6f      	ldr	r3, [pc, #444]	@ (80042c0 <_dtoa_r+0x8a0>)
 8004102:	2200      	movs	r2, #0
 8004104:	f7fc fa78 	bl	80005f8 <__aeabi_dmul>
 8004108:	2200      	movs	r2, #0
 800410a:	2300      	movs	r3, #0
 800410c:	4604      	mov	r4, r0
 800410e:	460d      	mov	r5, r1
 8004110:	f7fc fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8004114:	2800      	cmp	r0, #0
 8004116:	d09f      	beq.n	8004058 <_dtoa_r+0x638>
 8004118:	e7d1      	b.n	80040be <_dtoa_r+0x69e>
 800411a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800411c:	2a00      	cmp	r2, #0
 800411e:	f000 80ea 	beq.w	80042f6 <_dtoa_r+0x8d6>
 8004122:	9a07      	ldr	r2, [sp, #28]
 8004124:	2a01      	cmp	r2, #1
 8004126:	f300 80cd 	bgt.w	80042c4 <_dtoa_r+0x8a4>
 800412a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800412c:	2a00      	cmp	r2, #0
 800412e:	f000 80c1 	beq.w	80042b4 <_dtoa_r+0x894>
 8004132:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004136:	9c08      	ldr	r4, [sp, #32]
 8004138:	9e00      	ldr	r6, [sp, #0]
 800413a:	9a00      	ldr	r2, [sp, #0]
 800413c:	441a      	add	r2, r3
 800413e:	9200      	str	r2, [sp, #0]
 8004140:	9a06      	ldr	r2, [sp, #24]
 8004142:	2101      	movs	r1, #1
 8004144:	441a      	add	r2, r3
 8004146:	4648      	mov	r0, r9
 8004148:	9206      	str	r2, [sp, #24]
 800414a:	f000 fc2d 	bl	80049a8 <__i2b>
 800414e:	4605      	mov	r5, r0
 8004150:	b166      	cbz	r6, 800416c <_dtoa_r+0x74c>
 8004152:	9b06      	ldr	r3, [sp, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	dd09      	ble.n	800416c <_dtoa_r+0x74c>
 8004158:	42b3      	cmp	r3, r6
 800415a:	9a00      	ldr	r2, [sp, #0]
 800415c:	bfa8      	it	ge
 800415e:	4633      	movge	r3, r6
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	9200      	str	r2, [sp, #0]
 8004164:	9a06      	ldr	r2, [sp, #24]
 8004166:	1af6      	subs	r6, r6, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	9306      	str	r3, [sp, #24]
 800416c:	9b08      	ldr	r3, [sp, #32]
 800416e:	b30b      	cbz	r3, 80041b4 <_dtoa_r+0x794>
 8004170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80c6 	beq.w	8004304 <_dtoa_r+0x8e4>
 8004178:	2c00      	cmp	r4, #0
 800417a:	f000 80c0 	beq.w	80042fe <_dtoa_r+0x8de>
 800417e:	4629      	mov	r1, r5
 8004180:	4622      	mov	r2, r4
 8004182:	4648      	mov	r0, r9
 8004184:	f000 fcc8 	bl	8004b18 <__pow5mult>
 8004188:	9a02      	ldr	r2, [sp, #8]
 800418a:	4601      	mov	r1, r0
 800418c:	4605      	mov	r5, r0
 800418e:	4648      	mov	r0, r9
 8004190:	f000 fc20 	bl	80049d4 <__multiply>
 8004194:	9902      	ldr	r1, [sp, #8]
 8004196:	4680      	mov	r8, r0
 8004198:	4648      	mov	r0, r9
 800419a:	f000 fb51 	bl	8004840 <_Bfree>
 800419e:	9b08      	ldr	r3, [sp, #32]
 80041a0:	1b1b      	subs	r3, r3, r4
 80041a2:	9308      	str	r3, [sp, #32]
 80041a4:	f000 80b1 	beq.w	800430a <_dtoa_r+0x8ea>
 80041a8:	9a08      	ldr	r2, [sp, #32]
 80041aa:	4641      	mov	r1, r8
 80041ac:	4648      	mov	r0, r9
 80041ae:	f000 fcb3 	bl	8004b18 <__pow5mult>
 80041b2:	9002      	str	r0, [sp, #8]
 80041b4:	2101      	movs	r1, #1
 80041b6:	4648      	mov	r0, r9
 80041b8:	f000 fbf6 	bl	80049a8 <__i2b>
 80041bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041be:	4604      	mov	r4, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 81d8 	beq.w	8004576 <_dtoa_r+0xb56>
 80041c6:	461a      	mov	r2, r3
 80041c8:	4601      	mov	r1, r0
 80041ca:	4648      	mov	r0, r9
 80041cc:	f000 fca4 	bl	8004b18 <__pow5mult>
 80041d0:	9b07      	ldr	r3, [sp, #28]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	4604      	mov	r4, r0
 80041d6:	f300 809f 	bgt.w	8004318 <_dtoa_r+0x8f8>
 80041da:	9b04      	ldr	r3, [sp, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 8097 	bne.w	8004310 <_dtoa_r+0x8f0>
 80041e2:	9b05      	ldr	r3, [sp, #20]
 80041e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 8093 	bne.w	8004314 <_dtoa_r+0x8f4>
 80041ee:	9b05      	ldr	r3, [sp, #20]
 80041f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041f4:	0d1b      	lsrs	r3, r3, #20
 80041f6:	051b      	lsls	r3, r3, #20
 80041f8:	b133      	cbz	r3, 8004208 <_dtoa_r+0x7e8>
 80041fa:	9b00      	ldr	r3, [sp, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	9b06      	ldr	r3, [sp, #24]
 8004202:	3301      	adds	r3, #1
 8004204:	9306      	str	r3, [sp, #24]
 8004206:	2301      	movs	r3, #1
 8004208:	9308      	str	r3, [sp, #32]
 800420a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 81b8 	beq.w	8004582 <_dtoa_r+0xb62>
 8004212:	6923      	ldr	r3, [r4, #16]
 8004214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004218:	6918      	ldr	r0, [r3, #16]
 800421a:	f000 fb79 	bl	8004910 <__hi0bits>
 800421e:	f1c0 0020 	rsb	r0, r0, #32
 8004222:	9b06      	ldr	r3, [sp, #24]
 8004224:	4418      	add	r0, r3
 8004226:	f010 001f 	ands.w	r0, r0, #31
 800422a:	f000 8082 	beq.w	8004332 <_dtoa_r+0x912>
 800422e:	f1c0 0320 	rsb	r3, r0, #32
 8004232:	2b04      	cmp	r3, #4
 8004234:	dd73      	ble.n	800431e <_dtoa_r+0x8fe>
 8004236:	9b00      	ldr	r3, [sp, #0]
 8004238:	f1c0 001c 	rsb	r0, r0, #28
 800423c:	4403      	add	r3, r0
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	9b06      	ldr	r3, [sp, #24]
 8004242:	4403      	add	r3, r0
 8004244:	4406      	add	r6, r0
 8004246:	9306      	str	r3, [sp, #24]
 8004248:	9b00      	ldr	r3, [sp, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	dd05      	ble.n	800425a <_dtoa_r+0x83a>
 800424e:	9902      	ldr	r1, [sp, #8]
 8004250:	461a      	mov	r2, r3
 8004252:	4648      	mov	r0, r9
 8004254:	f000 fcba 	bl	8004bcc <__lshift>
 8004258:	9002      	str	r0, [sp, #8]
 800425a:	9b06      	ldr	r3, [sp, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	dd05      	ble.n	800426c <_dtoa_r+0x84c>
 8004260:	4621      	mov	r1, r4
 8004262:	461a      	mov	r2, r3
 8004264:	4648      	mov	r0, r9
 8004266:	f000 fcb1 	bl	8004bcc <__lshift>
 800426a:	4604      	mov	r4, r0
 800426c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d061      	beq.n	8004336 <_dtoa_r+0x916>
 8004272:	9802      	ldr	r0, [sp, #8]
 8004274:	4621      	mov	r1, r4
 8004276:	f000 fd15 	bl	8004ca4 <__mcmp>
 800427a:	2800      	cmp	r0, #0
 800427c:	da5b      	bge.n	8004336 <_dtoa_r+0x916>
 800427e:	2300      	movs	r3, #0
 8004280:	9902      	ldr	r1, [sp, #8]
 8004282:	220a      	movs	r2, #10
 8004284:	4648      	mov	r0, r9
 8004286:	f000 fafd 	bl	8004884 <__multadd>
 800428a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800428c:	9002      	str	r0, [sp, #8]
 800428e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8177 	beq.w	8004586 <_dtoa_r+0xb66>
 8004298:	4629      	mov	r1, r5
 800429a:	2300      	movs	r3, #0
 800429c:	220a      	movs	r2, #10
 800429e:	4648      	mov	r0, r9
 80042a0:	f000 faf0 	bl	8004884 <__multadd>
 80042a4:	f1bb 0f00 	cmp.w	fp, #0
 80042a8:	4605      	mov	r5, r0
 80042aa:	dc6f      	bgt.n	800438c <_dtoa_r+0x96c>
 80042ac:	9b07      	ldr	r3, [sp, #28]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	dc49      	bgt.n	8004346 <_dtoa_r+0x926>
 80042b2:	e06b      	b.n	800438c <_dtoa_r+0x96c>
 80042b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80042b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80042ba:	e73c      	b.n	8004136 <_dtoa_r+0x716>
 80042bc:	3fe00000 	.word	0x3fe00000
 80042c0:	40240000 	.word	0x40240000
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	1e5c      	subs	r4, r3, #1
 80042c8:	9b08      	ldr	r3, [sp, #32]
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	db09      	blt.n	80042e2 <_dtoa_r+0x8c2>
 80042ce:	1b1c      	subs	r4, r3, r4
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f6bf af30 	bge.w	8004138 <_dtoa_r+0x718>
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	9a03      	ldr	r2, [sp, #12]
 80042dc:	1a9e      	subs	r6, r3, r2
 80042de:	2300      	movs	r3, #0
 80042e0:	e72b      	b.n	800413a <_dtoa_r+0x71a>
 80042e2:	9b08      	ldr	r3, [sp, #32]
 80042e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80042e6:	9408      	str	r4, [sp, #32]
 80042e8:	1ae3      	subs	r3, r4, r3
 80042ea:	441a      	add	r2, r3
 80042ec:	9e00      	ldr	r6, [sp, #0]
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80042f2:	2400      	movs	r4, #0
 80042f4:	e721      	b.n	800413a <_dtoa_r+0x71a>
 80042f6:	9c08      	ldr	r4, [sp, #32]
 80042f8:	9e00      	ldr	r6, [sp, #0]
 80042fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80042fc:	e728      	b.n	8004150 <_dtoa_r+0x730>
 80042fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004302:	e751      	b.n	80041a8 <_dtoa_r+0x788>
 8004304:	9a08      	ldr	r2, [sp, #32]
 8004306:	9902      	ldr	r1, [sp, #8]
 8004308:	e750      	b.n	80041ac <_dtoa_r+0x78c>
 800430a:	f8cd 8008 	str.w	r8, [sp, #8]
 800430e:	e751      	b.n	80041b4 <_dtoa_r+0x794>
 8004310:	2300      	movs	r3, #0
 8004312:	e779      	b.n	8004208 <_dtoa_r+0x7e8>
 8004314:	9b04      	ldr	r3, [sp, #16]
 8004316:	e777      	b.n	8004208 <_dtoa_r+0x7e8>
 8004318:	2300      	movs	r3, #0
 800431a:	9308      	str	r3, [sp, #32]
 800431c:	e779      	b.n	8004212 <_dtoa_r+0x7f2>
 800431e:	d093      	beq.n	8004248 <_dtoa_r+0x828>
 8004320:	9a00      	ldr	r2, [sp, #0]
 8004322:	331c      	adds	r3, #28
 8004324:	441a      	add	r2, r3
 8004326:	9200      	str	r2, [sp, #0]
 8004328:	9a06      	ldr	r2, [sp, #24]
 800432a:	441a      	add	r2, r3
 800432c:	441e      	add	r6, r3
 800432e:	9206      	str	r2, [sp, #24]
 8004330:	e78a      	b.n	8004248 <_dtoa_r+0x828>
 8004332:	4603      	mov	r3, r0
 8004334:	e7f4      	b.n	8004320 <_dtoa_r+0x900>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	46b8      	mov	r8, r7
 800433c:	dc20      	bgt.n	8004380 <_dtoa_r+0x960>
 800433e:	469b      	mov	fp, r3
 8004340:	9b07      	ldr	r3, [sp, #28]
 8004342:	2b02      	cmp	r3, #2
 8004344:	dd1e      	ble.n	8004384 <_dtoa_r+0x964>
 8004346:	f1bb 0f00 	cmp.w	fp, #0
 800434a:	f47f adb1 	bne.w	8003eb0 <_dtoa_r+0x490>
 800434e:	4621      	mov	r1, r4
 8004350:	465b      	mov	r3, fp
 8004352:	2205      	movs	r2, #5
 8004354:	4648      	mov	r0, r9
 8004356:	f000 fa95 	bl	8004884 <__multadd>
 800435a:	4601      	mov	r1, r0
 800435c:	4604      	mov	r4, r0
 800435e:	9802      	ldr	r0, [sp, #8]
 8004360:	f000 fca0 	bl	8004ca4 <__mcmp>
 8004364:	2800      	cmp	r0, #0
 8004366:	f77f ada3 	ble.w	8003eb0 <_dtoa_r+0x490>
 800436a:	4656      	mov	r6, sl
 800436c:	2331      	movs	r3, #49	@ 0x31
 800436e:	f806 3b01 	strb.w	r3, [r6], #1
 8004372:	f108 0801 	add.w	r8, r8, #1
 8004376:	e59f      	b.n	8003eb8 <_dtoa_r+0x498>
 8004378:	9c03      	ldr	r4, [sp, #12]
 800437a:	46b8      	mov	r8, r7
 800437c:	4625      	mov	r5, r4
 800437e:	e7f4      	b.n	800436a <_dtoa_r+0x94a>
 8004380:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8101 	beq.w	800458e <_dtoa_r+0xb6e>
 800438c:	2e00      	cmp	r6, #0
 800438e:	dd05      	ble.n	800439c <_dtoa_r+0x97c>
 8004390:	4629      	mov	r1, r5
 8004392:	4632      	mov	r2, r6
 8004394:	4648      	mov	r0, r9
 8004396:	f000 fc19 	bl	8004bcc <__lshift>
 800439a:	4605      	mov	r5, r0
 800439c:	9b08      	ldr	r3, [sp, #32]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d05c      	beq.n	800445c <_dtoa_r+0xa3c>
 80043a2:	6869      	ldr	r1, [r5, #4]
 80043a4:	4648      	mov	r0, r9
 80043a6:	f000 fa0b 	bl	80047c0 <_Balloc>
 80043aa:	4606      	mov	r6, r0
 80043ac:	b928      	cbnz	r0, 80043ba <_dtoa_r+0x99a>
 80043ae:	4b82      	ldr	r3, [pc, #520]	@ (80045b8 <_dtoa_r+0xb98>)
 80043b0:	4602      	mov	r2, r0
 80043b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80043b6:	f7ff bb4a 	b.w	8003a4e <_dtoa_r+0x2e>
 80043ba:	692a      	ldr	r2, [r5, #16]
 80043bc:	3202      	adds	r2, #2
 80043be:	0092      	lsls	r2, r2, #2
 80043c0:	f105 010c 	add.w	r1, r5, #12
 80043c4:	300c      	adds	r0, #12
 80043c6:	f000 fe31 	bl	800502c <memcpy>
 80043ca:	2201      	movs	r2, #1
 80043cc:	4631      	mov	r1, r6
 80043ce:	4648      	mov	r0, r9
 80043d0:	f000 fbfc 	bl	8004bcc <__lshift>
 80043d4:	f10a 0301 	add.w	r3, sl, #1
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	eb0a 030b 	add.w	r3, sl, fp
 80043de:	9308      	str	r3, [sp, #32]
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	462f      	mov	r7, r5
 80043e8:	9306      	str	r3, [sp, #24]
 80043ea:	4605      	mov	r5, r0
 80043ec:	9b00      	ldr	r3, [sp, #0]
 80043ee:	9802      	ldr	r0, [sp, #8]
 80043f0:	4621      	mov	r1, r4
 80043f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80043f6:	f7ff fa88 	bl	800390a <quorem>
 80043fa:	4603      	mov	r3, r0
 80043fc:	3330      	adds	r3, #48	@ 0x30
 80043fe:	9003      	str	r0, [sp, #12]
 8004400:	4639      	mov	r1, r7
 8004402:	9802      	ldr	r0, [sp, #8]
 8004404:	9309      	str	r3, [sp, #36]	@ 0x24
 8004406:	f000 fc4d 	bl	8004ca4 <__mcmp>
 800440a:	462a      	mov	r2, r5
 800440c:	9004      	str	r0, [sp, #16]
 800440e:	4621      	mov	r1, r4
 8004410:	4648      	mov	r0, r9
 8004412:	f000 fc63 	bl	8004cdc <__mdiff>
 8004416:	68c2      	ldr	r2, [r0, #12]
 8004418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800441a:	4606      	mov	r6, r0
 800441c:	bb02      	cbnz	r2, 8004460 <_dtoa_r+0xa40>
 800441e:	4601      	mov	r1, r0
 8004420:	9802      	ldr	r0, [sp, #8]
 8004422:	f000 fc3f 	bl	8004ca4 <__mcmp>
 8004426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004428:	4602      	mov	r2, r0
 800442a:	4631      	mov	r1, r6
 800442c:	4648      	mov	r0, r9
 800442e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004430:	9309      	str	r3, [sp, #36]	@ 0x24
 8004432:	f000 fa05 	bl	8004840 <_Bfree>
 8004436:	9b07      	ldr	r3, [sp, #28]
 8004438:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800443a:	9e00      	ldr	r6, [sp, #0]
 800443c:	ea42 0103 	orr.w	r1, r2, r3
 8004440:	9b06      	ldr	r3, [sp, #24]
 8004442:	4319      	orrs	r1, r3
 8004444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004446:	d10d      	bne.n	8004464 <_dtoa_r+0xa44>
 8004448:	2b39      	cmp	r3, #57	@ 0x39
 800444a:	d027      	beq.n	800449c <_dtoa_r+0xa7c>
 800444c:	9a04      	ldr	r2, [sp, #16]
 800444e:	2a00      	cmp	r2, #0
 8004450:	dd01      	ble.n	8004456 <_dtoa_r+0xa36>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	3331      	adds	r3, #49	@ 0x31
 8004456:	f88b 3000 	strb.w	r3, [fp]
 800445a:	e52e      	b.n	8003eba <_dtoa_r+0x49a>
 800445c:	4628      	mov	r0, r5
 800445e:	e7b9      	b.n	80043d4 <_dtoa_r+0x9b4>
 8004460:	2201      	movs	r2, #1
 8004462:	e7e2      	b.n	800442a <_dtoa_r+0xa0a>
 8004464:	9904      	ldr	r1, [sp, #16]
 8004466:	2900      	cmp	r1, #0
 8004468:	db04      	blt.n	8004474 <_dtoa_r+0xa54>
 800446a:	9807      	ldr	r0, [sp, #28]
 800446c:	4301      	orrs	r1, r0
 800446e:	9806      	ldr	r0, [sp, #24]
 8004470:	4301      	orrs	r1, r0
 8004472:	d120      	bne.n	80044b6 <_dtoa_r+0xa96>
 8004474:	2a00      	cmp	r2, #0
 8004476:	ddee      	ble.n	8004456 <_dtoa_r+0xa36>
 8004478:	9902      	ldr	r1, [sp, #8]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2201      	movs	r2, #1
 800447e:	4648      	mov	r0, r9
 8004480:	f000 fba4 	bl	8004bcc <__lshift>
 8004484:	4621      	mov	r1, r4
 8004486:	9002      	str	r0, [sp, #8]
 8004488:	f000 fc0c 	bl	8004ca4 <__mcmp>
 800448c:	2800      	cmp	r0, #0
 800448e:	9b00      	ldr	r3, [sp, #0]
 8004490:	dc02      	bgt.n	8004498 <_dtoa_r+0xa78>
 8004492:	d1e0      	bne.n	8004456 <_dtoa_r+0xa36>
 8004494:	07da      	lsls	r2, r3, #31
 8004496:	d5de      	bpl.n	8004456 <_dtoa_r+0xa36>
 8004498:	2b39      	cmp	r3, #57	@ 0x39
 800449a:	d1da      	bne.n	8004452 <_dtoa_r+0xa32>
 800449c:	2339      	movs	r3, #57	@ 0x39
 800449e:	f88b 3000 	strb.w	r3, [fp]
 80044a2:	4633      	mov	r3, r6
 80044a4:	461e      	mov	r6, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80044ac:	2a39      	cmp	r2, #57	@ 0x39
 80044ae:	d04e      	beq.n	800454e <_dtoa_r+0xb2e>
 80044b0:	3201      	adds	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e501      	b.n	8003eba <_dtoa_r+0x49a>
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	dd03      	ble.n	80044c2 <_dtoa_r+0xaa2>
 80044ba:	2b39      	cmp	r3, #57	@ 0x39
 80044bc:	d0ee      	beq.n	800449c <_dtoa_r+0xa7c>
 80044be:	3301      	adds	r3, #1
 80044c0:	e7c9      	b.n	8004456 <_dtoa_r+0xa36>
 80044c2:	9a00      	ldr	r2, [sp, #0]
 80044c4:	9908      	ldr	r1, [sp, #32]
 80044c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80044ca:	428a      	cmp	r2, r1
 80044cc:	d028      	beq.n	8004520 <_dtoa_r+0xb00>
 80044ce:	9902      	ldr	r1, [sp, #8]
 80044d0:	2300      	movs	r3, #0
 80044d2:	220a      	movs	r2, #10
 80044d4:	4648      	mov	r0, r9
 80044d6:	f000 f9d5 	bl	8004884 <__multadd>
 80044da:	42af      	cmp	r7, r5
 80044dc:	9002      	str	r0, [sp, #8]
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	f04f 020a 	mov.w	r2, #10
 80044e6:	4639      	mov	r1, r7
 80044e8:	4648      	mov	r0, r9
 80044ea:	d107      	bne.n	80044fc <_dtoa_r+0xadc>
 80044ec:	f000 f9ca 	bl	8004884 <__multadd>
 80044f0:	4607      	mov	r7, r0
 80044f2:	4605      	mov	r5, r0
 80044f4:	9b00      	ldr	r3, [sp, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	e777      	b.n	80043ec <_dtoa_r+0x9cc>
 80044fc:	f000 f9c2 	bl	8004884 <__multadd>
 8004500:	4629      	mov	r1, r5
 8004502:	4607      	mov	r7, r0
 8004504:	2300      	movs	r3, #0
 8004506:	220a      	movs	r2, #10
 8004508:	4648      	mov	r0, r9
 800450a:	f000 f9bb 	bl	8004884 <__multadd>
 800450e:	4605      	mov	r5, r0
 8004510:	e7f0      	b.n	80044f4 <_dtoa_r+0xad4>
 8004512:	f1bb 0f00 	cmp.w	fp, #0
 8004516:	bfcc      	ite	gt
 8004518:	465e      	movgt	r6, fp
 800451a:	2601      	movle	r6, #1
 800451c:	4456      	add	r6, sl
 800451e:	2700      	movs	r7, #0
 8004520:	9902      	ldr	r1, [sp, #8]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2201      	movs	r2, #1
 8004526:	4648      	mov	r0, r9
 8004528:	f000 fb50 	bl	8004bcc <__lshift>
 800452c:	4621      	mov	r1, r4
 800452e:	9002      	str	r0, [sp, #8]
 8004530:	f000 fbb8 	bl	8004ca4 <__mcmp>
 8004534:	2800      	cmp	r0, #0
 8004536:	dcb4      	bgt.n	80044a2 <_dtoa_r+0xa82>
 8004538:	d102      	bne.n	8004540 <_dtoa_r+0xb20>
 800453a:	9b00      	ldr	r3, [sp, #0]
 800453c:	07db      	lsls	r3, r3, #31
 800453e:	d4b0      	bmi.n	80044a2 <_dtoa_r+0xa82>
 8004540:	4633      	mov	r3, r6
 8004542:	461e      	mov	r6, r3
 8004544:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004548:	2a30      	cmp	r2, #48	@ 0x30
 800454a:	d0fa      	beq.n	8004542 <_dtoa_r+0xb22>
 800454c:	e4b5      	b.n	8003eba <_dtoa_r+0x49a>
 800454e:	459a      	cmp	sl, r3
 8004550:	d1a8      	bne.n	80044a4 <_dtoa_r+0xa84>
 8004552:	2331      	movs	r3, #49	@ 0x31
 8004554:	f108 0801 	add.w	r8, r8, #1
 8004558:	f88a 3000 	strb.w	r3, [sl]
 800455c:	e4ad      	b.n	8003eba <_dtoa_r+0x49a>
 800455e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004560:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80045bc <_dtoa_r+0xb9c>
 8004564:	b11b      	cbz	r3, 800456e <_dtoa_r+0xb4e>
 8004566:	f10a 0308 	add.w	r3, sl, #8
 800456a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4650      	mov	r0, sl
 8004570:	b017      	add	sp, #92	@ 0x5c
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	9b07      	ldr	r3, [sp, #28]
 8004578:	2b01      	cmp	r3, #1
 800457a:	f77f ae2e 	ble.w	80041da <_dtoa_r+0x7ba>
 800457e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004580:	9308      	str	r3, [sp, #32]
 8004582:	2001      	movs	r0, #1
 8004584:	e64d      	b.n	8004222 <_dtoa_r+0x802>
 8004586:	f1bb 0f00 	cmp.w	fp, #0
 800458a:	f77f aed9 	ble.w	8004340 <_dtoa_r+0x920>
 800458e:	4656      	mov	r6, sl
 8004590:	9802      	ldr	r0, [sp, #8]
 8004592:	4621      	mov	r1, r4
 8004594:	f7ff f9b9 	bl	800390a <quorem>
 8004598:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800459c:	f806 3b01 	strb.w	r3, [r6], #1
 80045a0:	eba6 020a 	sub.w	r2, r6, sl
 80045a4:	4593      	cmp	fp, r2
 80045a6:	ddb4      	ble.n	8004512 <_dtoa_r+0xaf2>
 80045a8:	9902      	ldr	r1, [sp, #8]
 80045aa:	2300      	movs	r3, #0
 80045ac:	220a      	movs	r2, #10
 80045ae:	4648      	mov	r0, r9
 80045b0:	f000 f968 	bl	8004884 <__multadd>
 80045b4:	9002      	str	r0, [sp, #8]
 80045b6:	e7eb      	b.n	8004590 <_dtoa_r+0xb70>
 80045b8:	08005730 	.word	0x08005730
 80045bc:	080056b4 	.word	0x080056b4

080045c0 <_free_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4605      	mov	r5, r0
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d041      	beq.n	800464c <_free_r+0x8c>
 80045c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045cc:	1f0c      	subs	r4, r1, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bfb8      	it	lt
 80045d2:	18e4      	addlt	r4, r4, r3
 80045d4:	f000 f8e8 	bl	80047a8 <__malloc_lock>
 80045d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <_free_r+0x90>)
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	b933      	cbnz	r3, 80045ec <_free_r+0x2c>
 80045de:	6063      	str	r3, [r4, #4]
 80045e0:	6014      	str	r4, [r2, #0]
 80045e2:	4628      	mov	r0, r5
 80045e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e8:	f000 b8e4 	b.w	80047b4 <__malloc_unlock>
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	d908      	bls.n	8004602 <_free_r+0x42>
 80045f0:	6820      	ldr	r0, [r4, #0]
 80045f2:	1821      	adds	r1, r4, r0
 80045f4:	428b      	cmp	r3, r1
 80045f6:	bf01      	itttt	eq
 80045f8:	6819      	ldreq	r1, [r3, #0]
 80045fa:	685b      	ldreq	r3, [r3, #4]
 80045fc:	1809      	addeq	r1, r1, r0
 80045fe:	6021      	streq	r1, [r4, #0]
 8004600:	e7ed      	b.n	80045de <_free_r+0x1e>
 8004602:	461a      	mov	r2, r3
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	b10b      	cbz	r3, 800460c <_free_r+0x4c>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d9fa      	bls.n	8004602 <_free_r+0x42>
 800460c:	6811      	ldr	r1, [r2, #0]
 800460e:	1850      	adds	r0, r2, r1
 8004610:	42a0      	cmp	r0, r4
 8004612:	d10b      	bne.n	800462c <_free_r+0x6c>
 8004614:	6820      	ldr	r0, [r4, #0]
 8004616:	4401      	add	r1, r0
 8004618:	1850      	adds	r0, r2, r1
 800461a:	4283      	cmp	r3, r0
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	d1e0      	bne.n	80045e2 <_free_r+0x22>
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	6053      	str	r3, [r2, #4]
 8004626:	4408      	add	r0, r1
 8004628:	6010      	str	r0, [r2, #0]
 800462a:	e7da      	b.n	80045e2 <_free_r+0x22>
 800462c:	d902      	bls.n	8004634 <_free_r+0x74>
 800462e:	230c      	movs	r3, #12
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	e7d6      	b.n	80045e2 <_free_r+0x22>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	1821      	adds	r1, r4, r0
 8004638:	428b      	cmp	r3, r1
 800463a:	bf04      	itt	eq
 800463c:	6819      	ldreq	r1, [r3, #0]
 800463e:	685b      	ldreq	r3, [r3, #4]
 8004640:	6063      	str	r3, [r4, #4]
 8004642:	bf04      	itt	eq
 8004644:	1809      	addeq	r1, r1, r0
 8004646:	6021      	streq	r1, [r4, #0]
 8004648:	6054      	str	r4, [r2, #4]
 800464a:	e7ca      	b.n	80045e2 <_free_r+0x22>
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	20000394 	.word	0x20000394

08004654 <malloc>:
 8004654:	4b02      	ldr	r3, [pc, #8]	@ (8004660 <malloc+0xc>)
 8004656:	4601      	mov	r1, r0
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	f000 b825 	b.w	80046a8 <_malloc_r>
 800465e:	bf00      	nop
 8004660:	20000018 	.word	0x20000018

08004664 <sbrk_aligned>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4e0f      	ldr	r6, [pc, #60]	@ (80046a4 <sbrk_aligned+0x40>)
 8004668:	460c      	mov	r4, r1
 800466a:	6831      	ldr	r1, [r6, #0]
 800466c:	4605      	mov	r5, r0
 800466e:	b911      	cbnz	r1, 8004676 <sbrk_aligned+0x12>
 8004670:	f000 fccc 	bl	800500c <_sbrk_r>
 8004674:	6030      	str	r0, [r6, #0]
 8004676:	4621      	mov	r1, r4
 8004678:	4628      	mov	r0, r5
 800467a:	f000 fcc7 	bl	800500c <_sbrk_r>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	d103      	bne.n	800468a <sbrk_aligned+0x26>
 8004682:	f04f 34ff 	mov.w	r4, #4294967295
 8004686:	4620      	mov	r0, r4
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	1cc4      	adds	r4, r0, #3
 800468c:	f024 0403 	bic.w	r4, r4, #3
 8004690:	42a0      	cmp	r0, r4
 8004692:	d0f8      	beq.n	8004686 <sbrk_aligned+0x22>
 8004694:	1a21      	subs	r1, r4, r0
 8004696:	4628      	mov	r0, r5
 8004698:	f000 fcb8 	bl	800500c <_sbrk_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d1f2      	bne.n	8004686 <sbrk_aligned+0x22>
 80046a0:	e7ef      	b.n	8004682 <sbrk_aligned+0x1e>
 80046a2:	bf00      	nop
 80046a4:	20000390 	.word	0x20000390

080046a8 <_malloc_r>:
 80046a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ac:	1ccd      	adds	r5, r1, #3
 80046ae:	f025 0503 	bic.w	r5, r5, #3
 80046b2:	3508      	adds	r5, #8
 80046b4:	2d0c      	cmp	r5, #12
 80046b6:	bf38      	it	cc
 80046b8:	250c      	movcc	r5, #12
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	4606      	mov	r6, r0
 80046be:	db01      	blt.n	80046c4 <_malloc_r+0x1c>
 80046c0:	42a9      	cmp	r1, r5
 80046c2:	d904      	bls.n	80046ce <_malloc_r+0x26>
 80046c4:	230c      	movs	r3, #12
 80046c6:	6033      	str	r3, [r6, #0]
 80046c8:	2000      	movs	r0, #0
 80046ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047a4 <_malloc_r+0xfc>
 80046d2:	f000 f869 	bl	80047a8 <__malloc_lock>
 80046d6:	f8d8 3000 	ldr.w	r3, [r8]
 80046da:	461c      	mov	r4, r3
 80046dc:	bb44      	cbnz	r4, 8004730 <_malloc_r+0x88>
 80046de:	4629      	mov	r1, r5
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff ffbf 	bl	8004664 <sbrk_aligned>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	4604      	mov	r4, r0
 80046ea:	d158      	bne.n	800479e <_malloc_r+0xf6>
 80046ec:	f8d8 4000 	ldr.w	r4, [r8]
 80046f0:	4627      	mov	r7, r4
 80046f2:	2f00      	cmp	r7, #0
 80046f4:	d143      	bne.n	800477e <_malloc_r+0xd6>
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	d04b      	beq.n	8004792 <_malloc_r+0xea>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	4639      	mov	r1, r7
 80046fe:	4630      	mov	r0, r6
 8004700:	eb04 0903 	add.w	r9, r4, r3
 8004704:	f000 fc82 	bl	800500c <_sbrk_r>
 8004708:	4581      	cmp	r9, r0
 800470a:	d142      	bne.n	8004792 <_malloc_r+0xea>
 800470c:	6821      	ldr	r1, [r4, #0]
 800470e:	1a6d      	subs	r5, r5, r1
 8004710:	4629      	mov	r1, r5
 8004712:	4630      	mov	r0, r6
 8004714:	f7ff ffa6 	bl	8004664 <sbrk_aligned>
 8004718:	3001      	adds	r0, #1
 800471a:	d03a      	beq.n	8004792 <_malloc_r+0xea>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	442b      	add	r3, r5
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	f8d8 3000 	ldr.w	r3, [r8]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	bb62      	cbnz	r2, 8004784 <_malloc_r+0xdc>
 800472a:	f8c8 7000 	str.w	r7, [r8]
 800472e:	e00f      	b.n	8004750 <_malloc_r+0xa8>
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	1b52      	subs	r2, r2, r5
 8004734:	d420      	bmi.n	8004778 <_malloc_r+0xd0>
 8004736:	2a0b      	cmp	r2, #11
 8004738:	d917      	bls.n	800476a <_malloc_r+0xc2>
 800473a:	1961      	adds	r1, r4, r5
 800473c:	42a3      	cmp	r3, r4
 800473e:	6025      	str	r5, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	6059      	strne	r1, [r3, #4]
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	bf08      	it	eq
 8004748:	f8c8 1000 	streq.w	r1, [r8]
 800474c:	5162      	str	r2, [r4, r5]
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	4630      	mov	r0, r6
 8004752:	f000 f82f 	bl	80047b4 <__malloc_unlock>
 8004756:	f104 000b 	add.w	r0, r4, #11
 800475a:	1d23      	adds	r3, r4, #4
 800475c:	f020 0007 	bic.w	r0, r0, #7
 8004760:	1ac2      	subs	r2, r0, r3
 8004762:	bf1c      	itt	ne
 8004764:	1a1b      	subne	r3, r3, r0
 8004766:	50a3      	strne	r3, [r4, r2]
 8004768:	e7af      	b.n	80046ca <_malloc_r+0x22>
 800476a:	6862      	ldr	r2, [r4, #4]
 800476c:	42a3      	cmp	r3, r4
 800476e:	bf0c      	ite	eq
 8004770:	f8c8 2000 	streq.w	r2, [r8]
 8004774:	605a      	strne	r2, [r3, #4]
 8004776:	e7eb      	b.n	8004750 <_malloc_r+0xa8>
 8004778:	4623      	mov	r3, r4
 800477a:	6864      	ldr	r4, [r4, #4]
 800477c:	e7ae      	b.n	80046dc <_malloc_r+0x34>
 800477e:	463c      	mov	r4, r7
 8004780:	687f      	ldr	r7, [r7, #4]
 8004782:	e7b6      	b.n	80046f2 <_malloc_r+0x4a>
 8004784:	461a      	mov	r2, r3
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	42a3      	cmp	r3, r4
 800478a:	d1fb      	bne.n	8004784 <_malloc_r+0xdc>
 800478c:	2300      	movs	r3, #0
 800478e:	6053      	str	r3, [r2, #4]
 8004790:	e7de      	b.n	8004750 <_malloc_r+0xa8>
 8004792:	230c      	movs	r3, #12
 8004794:	6033      	str	r3, [r6, #0]
 8004796:	4630      	mov	r0, r6
 8004798:	f000 f80c 	bl	80047b4 <__malloc_unlock>
 800479c:	e794      	b.n	80046c8 <_malloc_r+0x20>
 800479e:	6005      	str	r5, [r0, #0]
 80047a0:	e7d6      	b.n	8004750 <_malloc_r+0xa8>
 80047a2:	bf00      	nop
 80047a4:	20000394 	.word	0x20000394

080047a8 <__malloc_lock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	@ (80047b0 <__malloc_lock+0x8>)
 80047aa:	f7ff b8ac 	b.w	8003906 <__retarget_lock_acquire_recursive>
 80047ae:	bf00      	nop
 80047b0:	2000038c 	.word	0x2000038c

080047b4 <__malloc_unlock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__malloc_unlock+0x8>)
 80047b6:	f7ff b8a7 	b.w	8003908 <__retarget_lock_release_recursive>
 80047ba:	bf00      	nop
 80047bc:	2000038c 	.word	0x2000038c

080047c0 <_Balloc>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	69c6      	ldr	r6, [r0, #28]
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	b976      	cbnz	r6, 80047e8 <_Balloc+0x28>
 80047ca:	2010      	movs	r0, #16
 80047cc:	f7ff ff42 	bl	8004654 <malloc>
 80047d0:	4602      	mov	r2, r0
 80047d2:	61e0      	str	r0, [r4, #28]
 80047d4:	b920      	cbnz	r0, 80047e0 <_Balloc+0x20>
 80047d6:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <_Balloc+0x78>)
 80047d8:	4818      	ldr	r0, [pc, #96]	@ (800483c <_Balloc+0x7c>)
 80047da:	216b      	movs	r1, #107	@ 0x6b
 80047dc:	f000 fc34 	bl	8005048 <__assert_func>
 80047e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047e4:	6006      	str	r6, [r0, #0]
 80047e6:	60c6      	str	r6, [r0, #12]
 80047e8:	69e6      	ldr	r6, [r4, #28]
 80047ea:	68f3      	ldr	r3, [r6, #12]
 80047ec:	b183      	cbz	r3, 8004810 <_Balloc+0x50>
 80047ee:	69e3      	ldr	r3, [r4, #28]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047f6:	b9b8      	cbnz	r0, 8004828 <_Balloc+0x68>
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f605 	lsl.w	r6, r1, r5
 80047fe:	1d72      	adds	r2, r6, #5
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	4620      	mov	r0, r4
 8004804:	f000 fc3e 	bl	8005084 <_calloc_r>
 8004808:	b160      	cbz	r0, 8004824 <_Balloc+0x64>
 800480a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800480e:	e00e      	b.n	800482e <_Balloc+0x6e>
 8004810:	2221      	movs	r2, #33	@ 0x21
 8004812:	2104      	movs	r1, #4
 8004814:	4620      	mov	r0, r4
 8004816:	f000 fc35 	bl	8005084 <_calloc_r>
 800481a:	69e3      	ldr	r3, [r4, #28]
 800481c:	60f0      	str	r0, [r6, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e4      	bne.n	80047ee <_Balloc+0x2e>
 8004824:	2000      	movs	r0, #0
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	6802      	ldr	r2, [r0, #0]
 800482a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800482e:	2300      	movs	r3, #0
 8004830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004834:	e7f7      	b.n	8004826 <_Balloc+0x66>
 8004836:	bf00      	nop
 8004838:	080056c1 	.word	0x080056c1
 800483c:	08005741 	.word	0x08005741

08004840 <_Bfree>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	69c6      	ldr	r6, [r0, #28]
 8004844:	4605      	mov	r5, r0
 8004846:	460c      	mov	r4, r1
 8004848:	b976      	cbnz	r6, 8004868 <_Bfree+0x28>
 800484a:	2010      	movs	r0, #16
 800484c:	f7ff ff02 	bl	8004654 <malloc>
 8004850:	4602      	mov	r2, r0
 8004852:	61e8      	str	r0, [r5, #28]
 8004854:	b920      	cbnz	r0, 8004860 <_Bfree+0x20>
 8004856:	4b09      	ldr	r3, [pc, #36]	@ (800487c <_Bfree+0x3c>)
 8004858:	4809      	ldr	r0, [pc, #36]	@ (8004880 <_Bfree+0x40>)
 800485a:	218f      	movs	r1, #143	@ 0x8f
 800485c:	f000 fbf4 	bl	8005048 <__assert_func>
 8004860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004864:	6006      	str	r6, [r0, #0]
 8004866:	60c6      	str	r6, [r0, #12]
 8004868:	b13c      	cbz	r4, 800487a <_Bfree+0x3a>
 800486a:	69eb      	ldr	r3, [r5, #28]
 800486c:	6862      	ldr	r2, [r4, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004874:	6021      	str	r1, [r4, #0]
 8004876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	080056c1 	.word	0x080056c1
 8004880:	08005741 	.word	0x08005741

08004884 <__multadd>:
 8004884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004888:	690d      	ldr	r5, [r1, #16]
 800488a:	4607      	mov	r7, r0
 800488c:	460c      	mov	r4, r1
 800488e:	461e      	mov	r6, r3
 8004890:	f101 0c14 	add.w	ip, r1, #20
 8004894:	2000      	movs	r0, #0
 8004896:	f8dc 3000 	ldr.w	r3, [ip]
 800489a:	b299      	uxth	r1, r3
 800489c:	fb02 6101 	mla	r1, r2, r1, r6
 80048a0:	0c1e      	lsrs	r6, r3, #16
 80048a2:	0c0b      	lsrs	r3, r1, #16
 80048a4:	fb02 3306 	mla	r3, r2, r6, r3
 80048a8:	b289      	uxth	r1, r1
 80048aa:	3001      	adds	r0, #1
 80048ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048b0:	4285      	cmp	r5, r0
 80048b2:	f84c 1b04 	str.w	r1, [ip], #4
 80048b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048ba:	dcec      	bgt.n	8004896 <__multadd+0x12>
 80048bc:	b30e      	cbz	r6, 8004902 <__multadd+0x7e>
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	dc19      	bgt.n	80048f8 <__multadd+0x74>
 80048c4:	6861      	ldr	r1, [r4, #4]
 80048c6:	4638      	mov	r0, r7
 80048c8:	3101      	adds	r1, #1
 80048ca:	f7ff ff79 	bl	80047c0 <_Balloc>
 80048ce:	4680      	mov	r8, r0
 80048d0:	b928      	cbnz	r0, 80048de <__multadd+0x5a>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <__multadd+0x84>)
 80048d6:	480d      	ldr	r0, [pc, #52]	@ (800490c <__multadd+0x88>)
 80048d8:	21ba      	movs	r1, #186	@ 0xba
 80048da:	f000 fbb5 	bl	8005048 <__assert_func>
 80048de:	6922      	ldr	r2, [r4, #16]
 80048e0:	3202      	adds	r2, #2
 80048e2:	f104 010c 	add.w	r1, r4, #12
 80048e6:	0092      	lsls	r2, r2, #2
 80048e8:	300c      	adds	r0, #12
 80048ea:	f000 fb9f 	bl	800502c <memcpy>
 80048ee:	4621      	mov	r1, r4
 80048f0:	4638      	mov	r0, r7
 80048f2:	f7ff ffa5 	bl	8004840 <_Bfree>
 80048f6:	4644      	mov	r4, r8
 80048f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048fc:	3501      	adds	r5, #1
 80048fe:	615e      	str	r6, [r3, #20]
 8004900:	6125      	str	r5, [r4, #16]
 8004902:	4620      	mov	r0, r4
 8004904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004908:	08005730 	.word	0x08005730
 800490c:	08005741 	.word	0x08005741

08004910 <__hi0bits>:
 8004910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004914:	4603      	mov	r3, r0
 8004916:	bf36      	itet	cc
 8004918:	0403      	lslcc	r3, r0, #16
 800491a:	2000      	movcs	r0, #0
 800491c:	2010      	movcc	r0, #16
 800491e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004922:	bf3c      	itt	cc
 8004924:	021b      	lslcc	r3, r3, #8
 8004926:	3008      	addcc	r0, #8
 8004928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800492c:	bf3c      	itt	cc
 800492e:	011b      	lslcc	r3, r3, #4
 8004930:	3004      	addcc	r0, #4
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	bf3c      	itt	cc
 8004938:	009b      	lslcc	r3, r3, #2
 800493a:	3002      	addcc	r0, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	db05      	blt.n	800494c <__hi0bits+0x3c>
 8004940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004944:	f100 0001 	add.w	r0, r0, #1
 8004948:	bf08      	it	eq
 800494a:	2020      	moveq	r0, #32
 800494c:	4770      	bx	lr

0800494e <__lo0bits>:
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	4602      	mov	r2, r0
 8004952:	f013 0007 	ands.w	r0, r3, #7
 8004956:	d00b      	beq.n	8004970 <__lo0bits+0x22>
 8004958:	07d9      	lsls	r1, r3, #31
 800495a:	d421      	bmi.n	80049a0 <__lo0bits+0x52>
 800495c:	0798      	lsls	r0, r3, #30
 800495e:	bf49      	itett	mi
 8004960:	085b      	lsrmi	r3, r3, #1
 8004962:	089b      	lsrpl	r3, r3, #2
 8004964:	2001      	movmi	r0, #1
 8004966:	6013      	strmi	r3, [r2, #0]
 8004968:	bf5c      	itt	pl
 800496a:	6013      	strpl	r3, [r2, #0]
 800496c:	2002      	movpl	r0, #2
 800496e:	4770      	bx	lr
 8004970:	b299      	uxth	r1, r3
 8004972:	b909      	cbnz	r1, 8004978 <__lo0bits+0x2a>
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	2010      	movs	r0, #16
 8004978:	b2d9      	uxtb	r1, r3
 800497a:	b909      	cbnz	r1, 8004980 <__lo0bits+0x32>
 800497c:	3008      	adds	r0, #8
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	0719      	lsls	r1, r3, #28
 8004982:	bf04      	itt	eq
 8004984:	091b      	lsreq	r3, r3, #4
 8004986:	3004      	addeq	r0, #4
 8004988:	0799      	lsls	r1, r3, #30
 800498a:	bf04      	itt	eq
 800498c:	089b      	lsreq	r3, r3, #2
 800498e:	3002      	addeq	r0, #2
 8004990:	07d9      	lsls	r1, r3, #31
 8004992:	d403      	bmi.n	800499c <__lo0bits+0x4e>
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	f100 0001 	add.w	r0, r0, #1
 800499a:	d003      	beq.n	80049a4 <__lo0bits+0x56>
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4770      	bx	lr
 80049a0:	2000      	movs	r0, #0
 80049a2:	4770      	bx	lr
 80049a4:	2020      	movs	r0, #32
 80049a6:	4770      	bx	lr

080049a8 <__i2b>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	460c      	mov	r4, r1
 80049ac:	2101      	movs	r1, #1
 80049ae:	f7ff ff07 	bl	80047c0 <_Balloc>
 80049b2:	4602      	mov	r2, r0
 80049b4:	b928      	cbnz	r0, 80049c2 <__i2b+0x1a>
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <__i2b+0x24>)
 80049b8:	4805      	ldr	r0, [pc, #20]	@ (80049d0 <__i2b+0x28>)
 80049ba:	f240 1145 	movw	r1, #325	@ 0x145
 80049be:	f000 fb43 	bl	8005048 <__assert_func>
 80049c2:	2301      	movs	r3, #1
 80049c4:	6144      	str	r4, [r0, #20]
 80049c6:	6103      	str	r3, [r0, #16]
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	bf00      	nop
 80049cc:	08005730 	.word	0x08005730
 80049d0:	08005741 	.word	0x08005741

080049d4 <__multiply>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	4617      	mov	r7, r2
 80049da:	690a      	ldr	r2, [r1, #16]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	429a      	cmp	r2, r3
 80049e0:	bfa8      	it	ge
 80049e2:	463b      	movge	r3, r7
 80049e4:	4689      	mov	r9, r1
 80049e6:	bfa4      	itt	ge
 80049e8:	460f      	movge	r7, r1
 80049ea:	4699      	movge	r9, r3
 80049ec:	693d      	ldr	r5, [r7, #16]
 80049ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	eb05 060a 	add.w	r6, r5, sl
 80049fa:	42b3      	cmp	r3, r6
 80049fc:	b085      	sub	sp, #20
 80049fe:	bfb8      	it	lt
 8004a00:	3101      	addlt	r1, #1
 8004a02:	f7ff fedd 	bl	80047c0 <_Balloc>
 8004a06:	b930      	cbnz	r0, 8004a16 <__multiply+0x42>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <__multiply+0x13c>)
 8004a0c:	4841      	ldr	r0, [pc, #260]	@ (8004b14 <__multiply+0x140>)
 8004a0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004a12:	f000 fb19 	bl	8005048 <__assert_func>
 8004a16:	f100 0414 	add.w	r4, r0, #20
 8004a1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004a1e:	4623      	mov	r3, r4
 8004a20:	2200      	movs	r2, #0
 8004a22:	4573      	cmp	r3, lr
 8004a24:	d320      	bcc.n	8004a68 <__multiply+0x94>
 8004a26:	f107 0814 	add.w	r8, r7, #20
 8004a2a:	f109 0114 	add.w	r1, r9, #20
 8004a2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004a32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004a36:	9302      	str	r3, [sp, #8]
 8004a38:	1beb      	subs	r3, r5, r7
 8004a3a:	3b15      	subs	r3, #21
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	3304      	adds	r3, #4
 8004a42:	3715      	adds	r7, #21
 8004a44:	42bd      	cmp	r5, r7
 8004a46:	bf38      	it	cc
 8004a48:	2304      	movcc	r3, #4
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	9b02      	ldr	r3, [sp, #8]
 8004a4e:	9103      	str	r1, [sp, #12]
 8004a50:	428b      	cmp	r3, r1
 8004a52:	d80c      	bhi.n	8004a6e <__multiply+0x9a>
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	dd03      	ble.n	8004a60 <__multiply+0x8c>
 8004a58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d055      	beq.n	8004b0c <__multiply+0x138>
 8004a60:	6106      	str	r6, [r0, #16]
 8004a62:	b005      	add	sp, #20
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	f843 2b04 	str.w	r2, [r3], #4
 8004a6c:	e7d9      	b.n	8004a22 <__multiply+0x4e>
 8004a6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004a72:	f1ba 0f00 	cmp.w	sl, #0
 8004a76:	d01f      	beq.n	8004ab8 <__multiply+0xe4>
 8004a78:	46c4      	mov	ip, r8
 8004a7a:	46a1      	mov	r9, r4
 8004a7c:	2700      	movs	r7, #0
 8004a7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004a82:	f8d9 3000 	ldr.w	r3, [r9]
 8004a86:	fa1f fb82 	uxth.w	fp, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004a90:	443b      	add	r3, r7
 8004a92:	f8d9 7000 	ldr.w	r7, [r9]
 8004a96:	0c12      	lsrs	r2, r2, #16
 8004a98:	0c3f      	lsrs	r7, r7, #16
 8004a9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8004a9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004aa8:	4565      	cmp	r5, ip
 8004aaa:	f849 3b04 	str.w	r3, [r9], #4
 8004aae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004ab2:	d8e4      	bhi.n	8004a7e <__multiply+0xaa>
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	50e7      	str	r7, [r4, r3]
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004abe:	3104      	adds	r1, #4
 8004ac0:	f1b9 0f00 	cmp.w	r9, #0
 8004ac4:	d020      	beq.n	8004b08 <__multiply+0x134>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	4647      	mov	r7, r8
 8004aca:	46a4      	mov	ip, r4
 8004acc:	f04f 0a00 	mov.w	sl, #0
 8004ad0:	f8b7 b000 	ldrh.w	fp, [r7]
 8004ad4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004ad8:	fb09 220b 	mla	r2, r9, fp, r2
 8004adc:	4452      	add	r2, sl
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ae4:	f84c 3b04 	str.w	r3, [ip], #4
 8004ae8:	f857 3b04 	ldr.w	r3, [r7], #4
 8004aec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004af0:	f8bc 3000 	ldrh.w	r3, [ip]
 8004af4:	fb09 330a 	mla	r3, r9, sl, r3
 8004af8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004afc:	42bd      	cmp	r5, r7
 8004afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b02:	d8e5      	bhi.n	8004ad0 <__multiply+0xfc>
 8004b04:	9a01      	ldr	r2, [sp, #4]
 8004b06:	50a3      	str	r3, [r4, r2]
 8004b08:	3404      	adds	r4, #4
 8004b0a:	e79f      	b.n	8004a4c <__multiply+0x78>
 8004b0c:	3e01      	subs	r6, #1
 8004b0e:	e7a1      	b.n	8004a54 <__multiply+0x80>
 8004b10:	08005730 	.word	0x08005730
 8004b14:	08005741 	.word	0x08005741

08004b18 <__pow5mult>:
 8004b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b1c:	4615      	mov	r5, r2
 8004b1e:	f012 0203 	ands.w	r2, r2, #3
 8004b22:	4607      	mov	r7, r0
 8004b24:	460e      	mov	r6, r1
 8004b26:	d007      	beq.n	8004b38 <__pow5mult+0x20>
 8004b28:	4c25      	ldr	r4, [pc, #148]	@ (8004bc0 <__pow5mult+0xa8>)
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b32:	f7ff fea7 	bl	8004884 <__multadd>
 8004b36:	4606      	mov	r6, r0
 8004b38:	10ad      	asrs	r5, r5, #2
 8004b3a:	d03d      	beq.n	8004bb8 <__pow5mult+0xa0>
 8004b3c:	69fc      	ldr	r4, [r7, #28]
 8004b3e:	b97c      	cbnz	r4, 8004b60 <__pow5mult+0x48>
 8004b40:	2010      	movs	r0, #16
 8004b42:	f7ff fd87 	bl	8004654 <malloc>
 8004b46:	4602      	mov	r2, r0
 8004b48:	61f8      	str	r0, [r7, #28]
 8004b4a:	b928      	cbnz	r0, 8004b58 <__pow5mult+0x40>
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <__pow5mult+0xac>)
 8004b4e:	481e      	ldr	r0, [pc, #120]	@ (8004bc8 <__pow5mult+0xb0>)
 8004b50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004b54:	f000 fa78 	bl	8005048 <__assert_func>
 8004b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b5c:	6004      	str	r4, [r0, #0]
 8004b5e:	60c4      	str	r4, [r0, #12]
 8004b60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004b64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b68:	b94c      	cbnz	r4, 8004b7e <__pow5mult+0x66>
 8004b6a:	f240 2171 	movw	r1, #625	@ 0x271
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f7ff ff1a 	bl	80049a8 <__i2b>
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	6003      	str	r3, [r0, #0]
 8004b7e:	f04f 0900 	mov.w	r9, #0
 8004b82:	07eb      	lsls	r3, r5, #31
 8004b84:	d50a      	bpl.n	8004b9c <__pow5mult+0x84>
 8004b86:	4631      	mov	r1, r6
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f7ff ff22 	bl	80049d4 <__multiply>
 8004b90:	4631      	mov	r1, r6
 8004b92:	4680      	mov	r8, r0
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff fe53 	bl	8004840 <_Bfree>
 8004b9a:	4646      	mov	r6, r8
 8004b9c:	106d      	asrs	r5, r5, #1
 8004b9e:	d00b      	beq.n	8004bb8 <__pow5mult+0xa0>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	b938      	cbnz	r0, 8004bb4 <__pow5mult+0x9c>
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4638      	mov	r0, r7
 8004baa:	f7ff ff13 	bl	80049d4 <__multiply>
 8004bae:	6020      	str	r0, [r4, #0]
 8004bb0:	f8c0 9000 	str.w	r9, [r0]
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	e7e4      	b.n	8004b82 <__pow5mult+0x6a>
 8004bb8:	4630      	mov	r0, r6
 8004bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bbe:	bf00      	nop
 8004bc0:	080057f4 	.word	0x080057f4
 8004bc4:	080056c1 	.word	0x080056c1
 8004bc8:	08005741 	.word	0x08005741

08004bcc <__lshift>:
 8004bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	6849      	ldr	r1, [r1, #4]
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	4607      	mov	r7, r0
 8004bde:	4691      	mov	r9, r2
 8004be0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004be4:	f108 0601 	add.w	r6, r8, #1
 8004be8:	42b3      	cmp	r3, r6
 8004bea:	db0b      	blt.n	8004c04 <__lshift+0x38>
 8004bec:	4638      	mov	r0, r7
 8004bee:	f7ff fde7 	bl	80047c0 <_Balloc>
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	b948      	cbnz	r0, 8004c0a <__lshift+0x3e>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4b28      	ldr	r3, [pc, #160]	@ (8004c9c <__lshift+0xd0>)
 8004bfa:	4829      	ldr	r0, [pc, #164]	@ (8004ca0 <__lshift+0xd4>)
 8004bfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004c00:	f000 fa22 	bl	8005048 <__assert_func>
 8004c04:	3101      	adds	r1, #1
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	e7ee      	b.n	8004be8 <__lshift+0x1c>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f100 0114 	add.w	r1, r0, #20
 8004c10:	f100 0210 	add.w	r2, r0, #16
 8004c14:	4618      	mov	r0, r3
 8004c16:	4553      	cmp	r3, sl
 8004c18:	db33      	blt.n	8004c82 <__lshift+0xb6>
 8004c1a:	6920      	ldr	r0, [r4, #16]
 8004c1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c20:	f104 0314 	add.w	r3, r4, #20
 8004c24:	f019 091f 	ands.w	r9, r9, #31
 8004c28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c30:	d02b      	beq.n	8004c8a <__lshift+0xbe>
 8004c32:	f1c9 0e20 	rsb	lr, r9, #32
 8004c36:	468a      	mov	sl, r1
 8004c38:	2200      	movs	r2, #0
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	fa00 f009 	lsl.w	r0, r0, r9
 8004c40:	4310      	orrs	r0, r2
 8004c42:	f84a 0b04 	str.w	r0, [sl], #4
 8004c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4a:	459c      	cmp	ip, r3
 8004c4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c50:	d8f3      	bhi.n	8004c3a <__lshift+0x6e>
 8004c52:	ebac 0304 	sub.w	r3, ip, r4
 8004c56:	3b15      	subs	r3, #21
 8004c58:	f023 0303 	bic.w	r3, r3, #3
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	f104 0015 	add.w	r0, r4, #21
 8004c62:	4560      	cmp	r0, ip
 8004c64:	bf88      	it	hi
 8004c66:	2304      	movhi	r3, #4
 8004c68:	50ca      	str	r2, [r1, r3]
 8004c6a:	b10a      	cbz	r2, 8004c70 <__lshift+0xa4>
 8004c6c:	f108 0602 	add.w	r6, r8, #2
 8004c70:	3e01      	subs	r6, #1
 8004c72:	4638      	mov	r0, r7
 8004c74:	612e      	str	r6, [r5, #16]
 8004c76:	4621      	mov	r1, r4
 8004c78:	f7ff fde2 	bl	8004840 <_Bfree>
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c86:	3301      	adds	r3, #1
 8004c88:	e7c5      	b.n	8004c16 <__lshift+0x4a>
 8004c8a:	3904      	subs	r1, #4
 8004c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c94:	459c      	cmp	ip, r3
 8004c96:	d8f9      	bhi.n	8004c8c <__lshift+0xc0>
 8004c98:	e7ea      	b.n	8004c70 <__lshift+0xa4>
 8004c9a:	bf00      	nop
 8004c9c:	08005730 	.word	0x08005730
 8004ca0:	08005741 	.word	0x08005741

08004ca4 <__mcmp>:
 8004ca4:	690a      	ldr	r2, [r1, #16]
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	6900      	ldr	r0, [r0, #16]
 8004caa:	1a80      	subs	r0, r0, r2
 8004cac:	b530      	push	{r4, r5, lr}
 8004cae:	d10e      	bne.n	8004cce <__mcmp+0x2a>
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	3114      	adds	r1, #20
 8004cb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004cb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004cbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cc4:	4295      	cmp	r5, r2
 8004cc6:	d003      	beq.n	8004cd0 <__mcmp+0x2c>
 8004cc8:	d205      	bcs.n	8004cd6 <__mcmp+0x32>
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295
 8004cce:	bd30      	pop	{r4, r5, pc}
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d3f3      	bcc.n	8004cbc <__mcmp+0x18>
 8004cd4:	e7fb      	b.n	8004cce <__mcmp+0x2a>
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7f9      	b.n	8004cce <__mcmp+0x2a>
	...

08004cdc <__mdiff>:
 8004cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	4689      	mov	r9, r1
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4648      	mov	r0, r9
 8004ce8:	4614      	mov	r4, r2
 8004cea:	f7ff ffdb 	bl	8004ca4 <__mcmp>
 8004cee:	1e05      	subs	r5, r0, #0
 8004cf0:	d112      	bne.n	8004d18 <__mdiff+0x3c>
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7ff fd63 	bl	80047c0 <_Balloc>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	b928      	cbnz	r0, 8004d0a <__mdiff+0x2e>
 8004cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8004dfc <__mdiff+0x120>)
 8004d00:	f240 2137 	movw	r1, #567	@ 0x237
 8004d04:	483e      	ldr	r0, [pc, #248]	@ (8004e00 <__mdiff+0x124>)
 8004d06:	f000 f99f 	bl	8005048 <__assert_func>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004d10:	4610      	mov	r0, r2
 8004d12:	b003      	add	sp, #12
 8004d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d18:	bfbc      	itt	lt
 8004d1a:	464b      	movlt	r3, r9
 8004d1c:	46a1      	movlt	r9, r4
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004d24:	bfba      	itte	lt
 8004d26:	461c      	movlt	r4, r3
 8004d28:	2501      	movlt	r5, #1
 8004d2a:	2500      	movge	r5, #0
 8004d2c:	f7ff fd48 	bl	80047c0 <_Balloc>
 8004d30:	4602      	mov	r2, r0
 8004d32:	b918      	cbnz	r0, 8004d3c <__mdiff+0x60>
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <__mdiff+0x120>)
 8004d36:	f240 2145 	movw	r1, #581	@ 0x245
 8004d3a:	e7e3      	b.n	8004d04 <__mdiff+0x28>
 8004d3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004d40:	6926      	ldr	r6, [r4, #16]
 8004d42:	60c5      	str	r5, [r0, #12]
 8004d44:	f109 0310 	add.w	r3, r9, #16
 8004d48:	f109 0514 	add.w	r5, r9, #20
 8004d4c:	f104 0e14 	add.w	lr, r4, #20
 8004d50:	f100 0b14 	add.w	fp, r0, #20
 8004d54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004d58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	46d9      	mov	r9, fp
 8004d60:	f04f 0c00 	mov.w	ip, #0
 8004d64:	9b01      	ldr	r3, [sp, #4]
 8004d66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004d6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	fa1f f38a 	uxth.w	r3, sl
 8004d74:	4619      	mov	r1, r3
 8004d76:	b283      	uxth	r3, r0
 8004d78:	1acb      	subs	r3, r1, r3
 8004d7a:	0c00      	lsrs	r0, r0, #16
 8004d7c:	4463      	add	r3, ip
 8004d7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004d82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d8c:	4576      	cmp	r6, lr
 8004d8e:	f849 3b04 	str.w	r3, [r9], #4
 8004d92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d96:	d8e5      	bhi.n	8004d64 <__mdiff+0x88>
 8004d98:	1b33      	subs	r3, r6, r4
 8004d9a:	3b15      	subs	r3, #21
 8004d9c:	f023 0303 	bic.w	r3, r3, #3
 8004da0:	3415      	adds	r4, #21
 8004da2:	3304      	adds	r3, #4
 8004da4:	42a6      	cmp	r6, r4
 8004da6:	bf38      	it	cc
 8004da8:	2304      	movcc	r3, #4
 8004daa:	441d      	add	r5, r3
 8004dac:	445b      	add	r3, fp
 8004dae:	461e      	mov	r6, r3
 8004db0:	462c      	mov	r4, r5
 8004db2:	4544      	cmp	r4, r8
 8004db4:	d30e      	bcc.n	8004dd4 <__mdiff+0xf8>
 8004db6:	f108 0103 	add.w	r1, r8, #3
 8004dba:	1b49      	subs	r1, r1, r5
 8004dbc:	f021 0103 	bic.w	r1, r1, #3
 8004dc0:	3d03      	subs	r5, #3
 8004dc2:	45a8      	cmp	r8, r5
 8004dc4:	bf38      	it	cc
 8004dc6:	2100      	movcc	r1, #0
 8004dc8:	440b      	add	r3, r1
 8004dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004dce:	b191      	cbz	r1, 8004df6 <__mdiff+0x11a>
 8004dd0:	6117      	str	r7, [r2, #16]
 8004dd2:	e79d      	b.n	8004d10 <__mdiff+0x34>
 8004dd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8004dd8:	46e6      	mov	lr, ip
 8004dda:	0c08      	lsrs	r0, r1, #16
 8004ddc:	fa1c fc81 	uxtah	ip, ip, r1
 8004de0:	4471      	add	r1, lr
 8004de2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004de6:	b289      	uxth	r1, r1
 8004de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004dec:	f846 1b04 	str.w	r1, [r6], #4
 8004df0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004df4:	e7dd      	b.n	8004db2 <__mdiff+0xd6>
 8004df6:	3f01      	subs	r7, #1
 8004df8:	e7e7      	b.n	8004dca <__mdiff+0xee>
 8004dfa:	bf00      	nop
 8004dfc:	08005730 	.word	0x08005730
 8004e00:	08005741 	.word	0x08005741

08004e04 <__d2b>:
 8004e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e08:	460f      	mov	r7, r1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	ec59 8b10 	vmov	r8, r9, d0
 8004e10:	4616      	mov	r6, r2
 8004e12:	f7ff fcd5 	bl	80047c0 <_Balloc>
 8004e16:	4604      	mov	r4, r0
 8004e18:	b930      	cbnz	r0, 8004e28 <__d2b+0x24>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4b23      	ldr	r3, [pc, #140]	@ (8004eac <__d2b+0xa8>)
 8004e1e:	4824      	ldr	r0, [pc, #144]	@ (8004eb0 <__d2b+0xac>)
 8004e20:	f240 310f 	movw	r1, #783	@ 0x30f
 8004e24:	f000 f910 	bl	8005048 <__assert_func>
 8004e28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004e2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e30:	b10d      	cbz	r5, 8004e36 <__d2b+0x32>
 8004e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	f1b8 0300 	subs.w	r3, r8, #0
 8004e3c:	d023      	beq.n	8004e86 <__d2b+0x82>
 8004e3e:	4668      	mov	r0, sp
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	f7ff fd84 	bl	800494e <__lo0bits>
 8004e46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e4a:	b1d0      	cbz	r0, 8004e82 <__d2b+0x7e>
 8004e4c:	f1c0 0320 	rsb	r3, r0, #32
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	430b      	orrs	r3, r1
 8004e56:	40c2      	lsrs	r2, r0
 8004e58:	6163      	str	r3, [r4, #20]
 8004e5a:	9201      	str	r2, [sp, #4]
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	61a3      	str	r3, [r4, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2201      	moveq	r2, #1
 8004e66:	2202      	movne	r2, #2
 8004e68:	6122      	str	r2, [r4, #16]
 8004e6a:	b1a5      	cbz	r5, 8004e96 <__d2b+0x92>
 8004e6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004e70:	4405      	add	r5, r0
 8004e72:	603d      	str	r5, [r7, #0]
 8004e74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	b003      	add	sp, #12
 8004e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e82:	6161      	str	r1, [r4, #20]
 8004e84:	e7ea      	b.n	8004e5c <__d2b+0x58>
 8004e86:	a801      	add	r0, sp, #4
 8004e88:	f7ff fd61 	bl	800494e <__lo0bits>
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	6163      	str	r3, [r4, #20]
 8004e90:	3020      	adds	r0, #32
 8004e92:	2201      	movs	r2, #1
 8004e94:	e7e8      	b.n	8004e68 <__d2b+0x64>
 8004e96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004e9e:	6038      	str	r0, [r7, #0]
 8004ea0:	6918      	ldr	r0, [r3, #16]
 8004ea2:	f7ff fd35 	bl	8004910 <__hi0bits>
 8004ea6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004eaa:	e7e5      	b.n	8004e78 <__d2b+0x74>
 8004eac:	08005730 	.word	0x08005730
 8004eb0:	08005741 	.word	0x08005741

08004eb4 <__sflush_r>:
 8004eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	0716      	lsls	r6, r2, #28
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	d454      	bmi.n	8004f6e <__sflush_r+0xba>
 8004ec4:	684b      	ldr	r3, [r1, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dc02      	bgt.n	8004ed0 <__sflush_r+0x1c>
 8004eca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd48      	ble.n	8004f62 <__sflush_r+0xae>
 8004ed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	d045      	beq.n	8004f62 <__sflush_r+0xae>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004edc:	682f      	ldr	r7, [r5, #0]
 8004ede:	6a21      	ldr	r1, [r4, #32]
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	d030      	beq.n	8004f46 <__sflush_r+0x92>
 8004ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	0759      	lsls	r1, r3, #29
 8004eea:	d505      	bpl.n	8004ef8 <__sflush_r+0x44>
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ef2:	b10b      	cbz	r3, 8004ef8 <__sflush_r+0x44>
 8004ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004efc:	6a21      	ldr	r1, [r4, #32]
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b0      	blx	r6
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	d106      	bne.n	8004f16 <__sflush_r+0x62>
 8004f08:	6829      	ldr	r1, [r5, #0]
 8004f0a:	291d      	cmp	r1, #29
 8004f0c:	d82b      	bhi.n	8004f66 <__sflush_r+0xb2>
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <__sflush_r+0x104>)
 8004f10:	40ca      	lsrs	r2, r1
 8004f12:	07d6      	lsls	r6, r2, #31
 8004f14:	d527      	bpl.n	8004f66 <__sflush_r+0xb2>
 8004f16:	2200      	movs	r2, #0
 8004f18:	6062      	str	r2, [r4, #4]
 8004f1a:	04d9      	lsls	r1, r3, #19
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	6022      	str	r2, [r4, #0]
 8004f20:	d504      	bpl.n	8004f2c <__sflush_r+0x78>
 8004f22:	1c42      	adds	r2, r0, #1
 8004f24:	d101      	bne.n	8004f2a <__sflush_r+0x76>
 8004f26:	682b      	ldr	r3, [r5, #0]
 8004f28:	b903      	cbnz	r3, 8004f2c <__sflush_r+0x78>
 8004f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f2e:	602f      	str	r7, [r5, #0]
 8004f30:	b1b9      	cbz	r1, 8004f62 <__sflush_r+0xae>
 8004f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d002      	beq.n	8004f40 <__sflush_r+0x8c>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f7ff fb40 	bl	80045c0 <_free_r>
 8004f40:	2300      	movs	r3, #0
 8004f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f44:	e00d      	b.n	8004f62 <__sflush_r+0xae>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b0      	blx	r6
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	1c50      	adds	r0, r2, #1
 8004f50:	d1c9      	bne.n	8004ee6 <__sflush_r+0x32>
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0c6      	beq.n	8004ee6 <__sflush_r+0x32>
 8004f58:	2b1d      	cmp	r3, #29
 8004f5a:	d001      	beq.n	8004f60 <__sflush_r+0xac>
 8004f5c:	2b16      	cmp	r3, #22
 8004f5e:	d11e      	bne.n	8004f9e <__sflush_r+0xea>
 8004f60:	602f      	str	r7, [r5, #0]
 8004f62:	2000      	movs	r0, #0
 8004f64:	e022      	b.n	8004fac <__sflush_r+0xf8>
 8004f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	e01b      	b.n	8004fa6 <__sflush_r+0xf2>
 8004f6e:	690f      	ldr	r7, [r1, #16]
 8004f70:	2f00      	cmp	r7, #0
 8004f72:	d0f6      	beq.n	8004f62 <__sflush_r+0xae>
 8004f74:	0793      	lsls	r3, r2, #30
 8004f76:	680e      	ldr	r6, [r1, #0]
 8004f78:	bf08      	it	eq
 8004f7a:	694b      	ldreq	r3, [r1, #20]
 8004f7c:	600f      	str	r7, [r1, #0]
 8004f7e:	bf18      	it	ne
 8004f80:	2300      	movne	r3, #0
 8004f82:	eba6 0807 	sub.w	r8, r6, r7
 8004f86:	608b      	str	r3, [r1, #8]
 8004f88:	f1b8 0f00 	cmp.w	r8, #0
 8004f8c:	dde9      	ble.n	8004f62 <__sflush_r+0xae>
 8004f8e:	6a21      	ldr	r1, [r4, #32]
 8004f90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f92:	4643      	mov	r3, r8
 8004f94:	463a      	mov	r2, r7
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b0      	blx	r6
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	dc08      	bgt.n	8004fb0 <__sflush_r+0xfc>
 8004f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb0:	4407      	add	r7, r0
 8004fb2:	eba8 0800 	sub.w	r8, r8, r0
 8004fb6:	e7e7      	b.n	8004f88 <__sflush_r+0xd4>
 8004fb8:	20400001 	.word	0x20400001

08004fbc <_fflush_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	690b      	ldr	r3, [r1, #16]
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	b913      	cbnz	r3, 8004fcc <_fflush_r+0x10>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	4628      	mov	r0, r5
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	b118      	cbz	r0, 8004fd6 <_fflush_r+0x1a>
 8004fce:	6a03      	ldr	r3, [r0, #32]
 8004fd0:	b90b      	cbnz	r3, 8004fd6 <_fflush_r+0x1a>
 8004fd2:	f7fe fba1 	bl	8003718 <__sinit>
 8004fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f3      	beq.n	8004fc6 <_fflush_r+0xa>
 8004fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fe0:	07d0      	lsls	r0, r2, #31
 8004fe2:	d404      	bmi.n	8004fee <_fflush_r+0x32>
 8004fe4:	0599      	lsls	r1, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_fflush_r+0x32>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fea:	f7fe fc8c 	bl	8003906 <__retarget_lock_acquire_recursive>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	f7ff ff5f 	bl	8004eb4 <__sflush_r>
 8004ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ff8:	07da      	lsls	r2, r3, #31
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	d4e4      	bmi.n	8004fc8 <_fflush_r+0xc>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	059b      	lsls	r3, r3, #22
 8005002:	d4e1      	bmi.n	8004fc8 <_fflush_r+0xc>
 8005004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005006:	f7fe fc7f 	bl	8003908 <__retarget_lock_release_recursive>
 800500a:	e7dd      	b.n	8004fc8 <_fflush_r+0xc>

0800500c <_sbrk_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d06      	ldr	r5, [pc, #24]	@ (8005028 <_sbrk_r+0x1c>)
 8005010:	2300      	movs	r3, #0
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	f7fc fa2c 	bl	8001474 <_sbrk>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_sbrk_r+0x1a>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_sbrk_r+0x1a>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20000388 	.word	0x20000388

0800502c <memcpy>:
 800502c:	440a      	add	r2, r1
 800502e:	4291      	cmp	r1, r2
 8005030:	f100 33ff 	add.w	r3, r0, #4294967295
 8005034:	d100      	bne.n	8005038 <memcpy+0xc>
 8005036:	4770      	bx	lr
 8005038:	b510      	push	{r4, lr}
 800503a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800503e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005042:	4291      	cmp	r1, r2
 8005044:	d1f9      	bne.n	800503a <memcpy+0xe>
 8005046:	bd10      	pop	{r4, pc}

08005048 <__assert_func>:
 8005048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800504a:	4614      	mov	r4, r2
 800504c:	461a      	mov	r2, r3
 800504e:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <__assert_func+0x2c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4605      	mov	r5, r0
 8005054:	68d8      	ldr	r0, [r3, #12]
 8005056:	b14c      	cbz	r4, 800506c <__assert_func+0x24>
 8005058:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <__assert_func+0x30>)
 800505a:	9100      	str	r1, [sp, #0]
 800505c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005060:	4906      	ldr	r1, [pc, #24]	@ (800507c <__assert_func+0x34>)
 8005062:	462b      	mov	r3, r5
 8005064:	f000 f842 	bl	80050ec <fiprintf>
 8005068:	f000 f852 	bl	8005110 <abort>
 800506c:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <__assert_func+0x38>)
 800506e:	461c      	mov	r4, r3
 8005070:	e7f3      	b.n	800505a <__assert_func+0x12>
 8005072:	bf00      	nop
 8005074:	20000018 	.word	0x20000018
 8005078:	080057a4 	.word	0x080057a4
 800507c:	080057b1 	.word	0x080057b1
 8005080:	080057df 	.word	0x080057df

08005084 <_calloc_r>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	fba1 5402 	umull	r5, r4, r1, r2
 800508a:	b934      	cbnz	r4, 800509a <_calloc_r+0x16>
 800508c:	4629      	mov	r1, r5
 800508e:	f7ff fb0b 	bl	80046a8 <_malloc_r>
 8005092:	4606      	mov	r6, r0
 8005094:	b928      	cbnz	r0, 80050a2 <_calloc_r+0x1e>
 8005096:	4630      	mov	r0, r6
 8005098:	bd70      	pop	{r4, r5, r6, pc}
 800509a:	220c      	movs	r2, #12
 800509c:	6002      	str	r2, [r0, #0]
 800509e:	2600      	movs	r6, #0
 80050a0:	e7f9      	b.n	8005096 <_calloc_r+0x12>
 80050a2:	462a      	mov	r2, r5
 80050a4:	4621      	mov	r1, r4
 80050a6:	f7fe fbb0 	bl	800380a <memset>
 80050aa:	e7f4      	b.n	8005096 <_calloc_r+0x12>

080050ac <__ascii_mbtowc>:
 80050ac:	b082      	sub	sp, #8
 80050ae:	b901      	cbnz	r1, 80050b2 <__ascii_mbtowc+0x6>
 80050b0:	a901      	add	r1, sp, #4
 80050b2:	b142      	cbz	r2, 80050c6 <__ascii_mbtowc+0x1a>
 80050b4:	b14b      	cbz	r3, 80050ca <__ascii_mbtowc+0x1e>
 80050b6:	7813      	ldrb	r3, [r2, #0]
 80050b8:	600b      	str	r3, [r1, #0]
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	1e10      	subs	r0, r2, #0
 80050be:	bf18      	it	ne
 80050c0:	2001      	movne	r0, #1
 80050c2:	b002      	add	sp, #8
 80050c4:	4770      	bx	lr
 80050c6:	4610      	mov	r0, r2
 80050c8:	e7fb      	b.n	80050c2 <__ascii_mbtowc+0x16>
 80050ca:	f06f 0001 	mvn.w	r0, #1
 80050ce:	e7f8      	b.n	80050c2 <__ascii_mbtowc+0x16>

080050d0 <__ascii_wctomb>:
 80050d0:	4603      	mov	r3, r0
 80050d2:	4608      	mov	r0, r1
 80050d4:	b141      	cbz	r1, 80050e8 <__ascii_wctomb+0x18>
 80050d6:	2aff      	cmp	r2, #255	@ 0xff
 80050d8:	d904      	bls.n	80050e4 <__ascii_wctomb+0x14>
 80050da:	228a      	movs	r2, #138	@ 0x8a
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f04f 30ff 	mov.w	r0, #4294967295
 80050e2:	4770      	bx	lr
 80050e4:	700a      	strb	r2, [r1, #0]
 80050e6:	2001      	movs	r0, #1
 80050e8:	4770      	bx	lr
	...

080050ec <fiprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b503      	push	{r0, r1, lr}
 80050f0:	4601      	mov	r1, r0
 80050f2:	ab03      	add	r3, sp, #12
 80050f4:	4805      	ldr	r0, [pc, #20]	@ (800510c <fiprintf+0x20>)
 80050f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	f000 f837 	bl	8005170 <_vfiprintf_r>
 8005102:	b002      	add	sp, #8
 8005104:	f85d eb04 	ldr.w	lr, [sp], #4
 8005108:	b003      	add	sp, #12
 800510a:	4770      	bx	lr
 800510c:	20000018 	.word	0x20000018

08005110 <abort>:
 8005110:	b508      	push	{r3, lr}
 8005112:	2006      	movs	r0, #6
 8005114:	f000 fa00 	bl	8005518 <raise>
 8005118:	2001      	movs	r0, #1
 800511a:	f7fc f933 	bl	8001384 <_exit>

0800511e <__sfputc_r>:
 800511e:	6893      	ldr	r3, [r2, #8]
 8005120:	3b01      	subs	r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	b410      	push	{r4}
 8005126:	6093      	str	r3, [r2, #8]
 8005128:	da08      	bge.n	800513c <__sfputc_r+0x1e>
 800512a:	6994      	ldr	r4, [r2, #24]
 800512c:	42a3      	cmp	r3, r4
 800512e:	db01      	blt.n	8005134 <__sfputc_r+0x16>
 8005130:	290a      	cmp	r1, #10
 8005132:	d103      	bne.n	800513c <__sfputc_r+0x1e>
 8005134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005138:	f000 b932 	b.w	80053a0 <__swbuf_r>
 800513c:	6813      	ldr	r3, [r2, #0]
 800513e:	1c58      	adds	r0, r3, #1
 8005140:	6010      	str	r0, [r2, #0]
 8005142:	7019      	strb	r1, [r3, #0]
 8005144:	4608      	mov	r0, r1
 8005146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800514a:	4770      	bx	lr

0800514c <__sfputs_r>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	4606      	mov	r6, r0
 8005150:	460f      	mov	r7, r1
 8005152:	4614      	mov	r4, r2
 8005154:	18d5      	adds	r5, r2, r3
 8005156:	42ac      	cmp	r4, r5
 8005158:	d101      	bne.n	800515e <__sfputs_r+0x12>
 800515a:	2000      	movs	r0, #0
 800515c:	e007      	b.n	800516e <__sfputs_r+0x22>
 800515e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005162:	463a      	mov	r2, r7
 8005164:	4630      	mov	r0, r6
 8005166:	f7ff ffda 	bl	800511e <__sfputc_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d1f3      	bne.n	8005156 <__sfputs_r+0xa>
 800516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005170 <_vfiprintf_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	460d      	mov	r5, r1
 8005176:	b09d      	sub	sp, #116	@ 0x74
 8005178:	4614      	mov	r4, r2
 800517a:	4698      	mov	r8, r3
 800517c:	4606      	mov	r6, r0
 800517e:	b118      	cbz	r0, 8005188 <_vfiprintf_r+0x18>
 8005180:	6a03      	ldr	r3, [r0, #32]
 8005182:	b90b      	cbnz	r3, 8005188 <_vfiprintf_r+0x18>
 8005184:	f7fe fac8 	bl	8003718 <__sinit>
 8005188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800518a:	07d9      	lsls	r1, r3, #31
 800518c:	d405      	bmi.n	800519a <_vfiprintf_r+0x2a>
 800518e:	89ab      	ldrh	r3, [r5, #12]
 8005190:	059a      	lsls	r2, r3, #22
 8005192:	d402      	bmi.n	800519a <_vfiprintf_r+0x2a>
 8005194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005196:	f7fe fbb6 	bl	8003906 <__retarget_lock_acquire_recursive>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	071b      	lsls	r3, r3, #28
 800519e:	d501      	bpl.n	80051a4 <_vfiprintf_r+0x34>
 80051a0:	692b      	ldr	r3, [r5, #16]
 80051a2:	b99b      	cbnz	r3, 80051cc <_vfiprintf_r+0x5c>
 80051a4:	4629      	mov	r1, r5
 80051a6:	4630      	mov	r0, r6
 80051a8:	f000 f938 	bl	800541c <__swsetup_r>
 80051ac:	b170      	cbz	r0, 80051cc <_vfiprintf_r+0x5c>
 80051ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051b0:	07dc      	lsls	r4, r3, #31
 80051b2:	d504      	bpl.n	80051be <_vfiprintf_r+0x4e>
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	b01d      	add	sp, #116	@ 0x74
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	89ab      	ldrh	r3, [r5, #12]
 80051c0:	0598      	lsls	r0, r3, #22
 80051c2:	d4f7      	bmi.n	80051b4 <_vfiprintf_r+0x44>
 80051c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051c6:	f7fe fb9f 	bl	8003908 <__retarget_lock_release_recursive>
 80051ca:	e7f3      	b.n	80051b4 <_vfiprintf_r+0x44>
 80051cc:	2300      	movs	r3, #0
 80051ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d0:	2320      	movs	r3, #32
 80051d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051da:	2330      	movs	r3, #48	@ 0x30
 80051dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800538c <_vfiprintf_r+0x21c>
 80051e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051e4:	f04f 0901 	mov.w	r9, #1
 80051e8:	4623      	mov	r3, r4
 80051ea:	469a      	mov	sl, r3
 80051ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f0:	b10a      	cbz	r2, 80051f6 <_vfiprintf_r+0x86>
 80051f2:	2a25      	cmp	r2, #37	@ 0x25
 80051f4:	d1f9      	bne.n	80051ea <_vfiprintf_r+0x7a>
 80051f6:	ebba 0b04 	subs.w	fp, sl, r4
 80051fa:	d00b      	beq.n	8005214 <_vfiprintf_r+0xa4>
 80051fc:	465b      	mov	r3, fp
 80051fe:	4622      	mov	r2, r4
 8005200:	4629      	mov	r1, r5
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff ffa2 	bl	800514c <__sfputs_r>
 8005208:	3001      	adds	r0, #1
 800520a:	f000 80a7 	beq.w	800535c <_vfiprintf_r+0x1ec>
 800520e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005210:	445a      	add	r2, fp
 8005212:	9209      	str	r2, [sp, #36]	@ 0x24
 8005214:	f89a 3000 	ldrb.w	r3, [sl]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 809f 	beq.w	800535c <_vfiprintf_r+0x1ec>
 800521e:	2300      	movs	r3, #0
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005228:	f10a 0a01 	add.w	sl, sl, #1
 800522c:	9304      	str	r3, [sp, #16]
 800522e:	9307      	str	r3, [sp, #28]
 8005230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005234:	931a      	str	r3, [sp, #104]	@ 0x68
 8005236:	4654      	mov	r4, sl
 8005238:	2205      	movs	r2, #5
 800523a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523e:	4853      	ldr	r0, [pc, #332]	@ (800538c <_vfiprintf_r+0x21c>)
 8005240:	f7fa ffc6 	bl	80001d0 <memchr>
 8005244:	9a04      	ldr	r2, [sp, #16]
 8005246:	b9d8      	cbnz	r0, 8005280 <_vfiprintf_r+0x110>
 8005248:	06d1      	lsls	r1, r2, #27
 800524a:	bf44      	itt	mi
 800524c:	2320      	movmi	r3, #32
 800524e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005252:	0713      	lsls	r3, r2, #28
 8005254:	bf44      	itt	mi
 8005256:	232b      	movmi	r3, #43	@ 0x2b
 8005258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800525c:	f89a 3000 	ldrb.w	r3, [sl]
 8005260:	2b2a      	cmp	r3, #42	@ 0x2a
 8005262:	d015      	beq.n	8005290 <_vfiprintf_r+0x120>
 8005264:	9a07      	ldr	r2, [sp, #28]
 8005266:	4654      	mov	r4, sl
 8005268:	2000      	movs	r0, #0
 800526a:	f04f 0c0a 	mov.w	ip, #10
 800526e:	4621      	mov	r1, r4
 8005270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005274:	3b30      	subs	r3, #48	@ 0x30
 8005276:	2b09      	cmp	r3, #9
 8005278:	d94b      	bls.n	8005312 <_vfiprintf_r+0x1a2>
 800527a:	b1b0      	cbz	r0, 80052aa <_vfiprintf_r+0x13a>
 800527c:	9207      	str	r2, [sp, #28]
 800527e:	e014      	b.n	80052aa <_vfiprintf_r+0x13a>
 8005280:	eba0 0308 	sub.w	r3, r0, r8
 8005284:	fa09 f303 	lsl.w	r3, r9, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	46a2      	mov	sl, r4
 800528e:	e7d2      	b.n	8005236 <_vfiprintf_r+0xc6>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	1d19      	adds	r1, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	9103      	str	r1, [sp, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	bfbb      	ittet	lt
 800529c:	425b      	neglt	r3, r3
 800529e:	f042 0202 	orrlt.w	r2, r2, #2
 80052a2:	9307      	strge	r3, [sp, #28]
 80052a4:	9307      	strlt	r3, [sp, #28]
 80052a6:	bfb8      	it	lt
 80052a8:	9204      	strlt	r2, [sp, #16]
 80052aa:	7823      	ldrb	r3, [r4, #0]
 80052ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80052ae:	d10a      	bne.n	80052c6 <_vfiprintf_r+0x156>
 80052b0:	7863      	ldrb	r3, [r4, #1]
 80052b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80052b4:	d132      	bne.n	800531c <_vfiprintf_r+0x1ac>
 80052b6:	9b03      	ldr	r3, [sp, #12]
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052c2:	3402      	adds	r4, #2
 80052c4:	9305      	str	r3, [sp, #20]
 80052c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800539c <_vfiprintf_r+0x22c>
 80052ca:	7821      	ldrb	r1, [r4, #0]
 80052cc:	2203      	movs	r2, #3
 80052ce:	4650      	mov	r0, sl
 80052d0:	f7fa ff7e 	bl	80001d0 <memchr>
 80052d4:	b138      	cbz	r0, 80052e6 <_vfiprintf_r+0x176>
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	eba0 000a 	sub.w	r0, r0, sl
 80052dc:	2240      	movs	r2, #64	@ 0x40
 80052de:	4082      	lsls	r2, r0
 80052e0:	4313      	orrs	r3, r2
 80052e2:	3401      	adds	r4, #1
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ea:	4829      	ldr	r0, [pc, #164]	@ (8005390 <_vfiprintf_r+0x220>)
 80052ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052f0:	2206      	movs	r2, #6
 80052f2:	f7fa ff6d 	bl	80001d0 <memchr>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d03f      	beq.n	800537a <_vfiprintf_r+0x20a>
 80052fa:	4b26      	ldr	r3, [pc, #152]	@ (8005394 <_vfiprintf_r+0x224>)
 80052fc:	bb1b      	cbnz	r3, 8005346 <_vfiprintf_r+0x1d6>
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	3307      	adds	r3, #7
 8005302:	f023 0307 	bic.w	r3, r3, #7
 8005306:	3308      	adds	r3, #8
 8005308:	9303      	str	r3, [sp, #12]
 800530a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530c:	443b      	add	r3, r7
 800530e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005310:	e76a      	b.n	80051e8 <_vfiprintf_r+0x78>
 8005312:	fb0c 3202 	mla	r2, ip, r2, r3
 8005316:	460c      	mov	r4, r1
 8005318:	2001      	movs	r0, #1
 800531a:	e7a8      	b.n	800526e <_vfiprintf_r+0xfe>
 800531c:	2300      	movs	r3, #0
 800531e:	3401      	adds	r4, #1
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	4619      	mov	r1, r3
 8005324:	f04f 0c0a 	mov.w	ip, #10
 8005328:	4620      	mov	r0, r4
 800532a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532e:	3a30      	subs	r2, #48	@ 0x30
 8005330:	2a09      	cmp	r2, #9
 8005332:	d903      	bls.n	800533c <_vfiprintf_r+0x1cc>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0c6      	beq.n	80052c6 <_vfiprintf_r+0x156>
 8005338:	9105      	str	r1, [sp, #20]
 800533a:	e7c4      	b.n	80052c6 <_vfiprintf_r+0x156>
 800533c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005340:	4604      	mov	r4, r0
 8005342:	2301      	movs	r3, #1
 8005344:	e7f0      	b.n	8005328 <_vfiprintf_r+0x1b8>
 8005346:	ab03      	add	r3, sp, #12
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	462a      	mov	r2, r5
 800534c:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <_vfiprintf_r+0x228>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	4630      	mov	r0, r6
 8005352:	f7fd fd9f 	bl	8002e94 <_printf_float>
 8005356:	4607      	mov	r7, r0
 8005358:	1c78      	adds	r0, r7, #1
 800535a:	d1d6      	bne.n	800530a <_vfiprintf_r+0x19a>
 800535c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800535e:	07d9      	lsls	r1, r3, #31
 8005360:	d405      	bmi.n	800536e <_vfiprintf_r+0x1fe>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	059a      	lsls	r2, r3, #22
 8005366:	d402      	bmi.n	800536e <_vfiprintf_r+0x1fe>
 8005368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800536a:	f7fe facd 	bl	8003908 <__retarget_lock_release_recursive>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	065b      	lsls	r3, r3, #25
 8005372:	f53f af1f 	bmi.w	80051b4 <_vfiprintf_r+0x44>
 8005376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005378:	e71e      	b.n	80051b8 <_vfiprintf_r+0x48>
 800537a:	ab03      	add	r3, sp, #12
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	462a      	mov	r2, r5
 8005380:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <_vfiprintf_r+0x228>)
 8005382:	a904      	add	r1, sp, #16
 8005384:	4630      	mov	r0, r6
 8005386:	f7fe f81d 	bl	80033c4 <_printf_i>
 800538a:	e7e4      	b.n	8005356 <_vfiprintf_r+0x1e6>
 800538c:	080057e0 	.word	0x080057e0
 8005390:	080057ea 	.word	0x080057ea
 8005394:	08002e95 	.word	0x08002e95
 8005398:	0800514d 	.word	0x0800514d
 800539c:	080057e6 	.word	0x080057e6

080053a0 <__swbuf_r>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	460e      	mov	r6, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	4605      	mov	r5, r0
 80053a8:	b118      	cbz	r0, 80053b2 <__swbuf_r+0x12>
 80053aa:	6a03      	ldr	r3, [r0, #32]
 80053ac:	b90b      	cbnz	r3, 80053b2 <__swbuf_r+0x12>
 80053ae:	f7fe f9b3 	bl	8003718 <__sinit>
 80053b2:	69a3      	ldr	r3, [r4, #24]
 80053b4:	60a3      	str	r3, [r4, #8]
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	071a      	lsls	r2, r3, #28
 80053ba:	d501      	bpl.n	80053c0 <__swbuf_r+0x20>
 80053bc:	6923      	ldr	r3, [r4, #16]
 80053be:	b943      	cbnz	r3, 80053d2 <__swbuf_r+0x32>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f82a 	bl	800541c <__swsetup_r>
 80053c8:	b118      	cbz	r0, 80053d2 <__swbuf_r+0x32>
 80053ca:	f04f 37ff 	mov.w	r7, #4294967295
 80053ce:	4638      	mov	r0, r7
 80053d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6922      	ldr	r2, [r4, #16]
 80053d6:	1a98      	subs	r0, r3, r2
 80053d8:	6963      	ldr	r3, [r4, #20]
 80053da:	b2f6      	uxtb	r6, r6
 80053dc:	4283      	cmp	r3, r0
 80053de:	4637      	mov	r7, r6
 80053e0:	dc05      	bgt.n	80053ee <__swbuf_r+0x4e>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f7ff fde9 	bl	8004fbc <_fflush_r>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d1ed      	bne.n	80053ca <__swbuf_r+0x2a>
 80053ee:	68a3      	ldr	r3, [r4, #8]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	60a3      	str	r3, [r4, #8]
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	6022      	str	r2, [r4, #0]
 80053fa:	701e      	strb	r6, [r3, #0]
 80053fc:	6962      	ldr	r2, [r4, #20]
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	429a      	cmp	r2, r3
 8005402:	d004      	beq.n	800540e <__swbuf_r+0x6e>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	07db      	lsls	r3, r3, #31
 8005408:	d5e1      	bpl.n	80053ce <__swbuf_r+0x2e>
 800540a:	2e0a      	cmp	r6, #10
 800540c:	d1df      	bne.n	80053ce <__swbuf_r+0x2e>
 800540e:	4621      	mov	r1, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f7ff fdd3 	bl	8004fbc <_fflush_r>
 8005416:	2800      	cmp	r0, #0
 8005418:	d0d9      	beq.n	80053ce <__swbuf_r+0x2e>
 800541a:	e7d6      	b.n	80053ca <__swbuf_r+0x2a>

0800541c <__swsetup_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4b29      	ldr	r3, [pc, #164]	@ (80054c4 <__swsetup_r+0xa8>)
 8005420:	4605      	mov	r5, r0
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	460c      	mov	r4, r1
 8005426:	b118      	cbz	r0, 8005430 <__swsetup_r+0x14>
 8005428:	6a03      	ldr	r3, [r0, #32]
 800542a:	b90b      	cbnz	r3, 8005430 <__swsetup_r+0x14>
 800542c:	f7fe f974 	bl	8003718 <__sinit>
 8005430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005434:	0719      	lsls	r1, r3, #28
 8005436:	d422      	bmi.n	800547e <__swsetup_r+0x62>
 8005438:	06da      	lsls	r2, r3, #27
 800543a:	d407      	bmi.n	800544c <__swsetup_r+0x30>
 800543c:	2209      	movs	r2, #9
 800543e:	602a      	str	r2, [r5, #0]
 8005440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	e033      	b.n	80054b4 <__swsetup_r+0x98>
 800544c:	0758      	lsls	r0, r3, #29
 800544e:	d512      	bpl.n	8005476 <__swsetup_r+0x5a>
 8005450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005452:	b141      	cbz	r1, 8005466 <__swsetup_r+0x4a>
 8005454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005458:	4299      	cmp	r1, r3
 800545a:	d002      	beq.n	8005462 <__swsetup_r+0x46>
 800545c:	4628      	mov	r0, r5
 800545e:	f7ff f8af 	bl	80045c0 <_free_r>
 8005462:	2300      	movs	r3, #0
 8005464:	6363      	str	r3, [r4, #52]	@ 0x34
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800546c:	81a3      	strh	r3, [r4, #12]
 800546e:	2300      	movs	r3, #0
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	f043 0308 	orr.w	r3, r3, #8
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	6923      	ldr	r3, [r4, #16]
 8005480:	b94b      	cbnz	r3, 8005496 <__swsetup_r+0x7a>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800548c:	d003      	beq.n	8005496 <__swsetup_r+0x7a>
 800548e:	4621      	mov	r1, r4
 8005490:	4628      	mov	r0, r5
 8005492:	f000 f883 	bl	800559c <__smakebuf_r>
 8005496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549a:	f013 0201 	ands.w	r2, r3, #1
 800549e:	d00a      	beq.n	80054b6 <__swsetup_r+0x9a>
 80054a0:	2200      	movs	r2, #0
 80054a2:	60a2      	str	r2, [r4, #8]
 80054a4:	6962      	ldr	r2, [r4, #20]
 80054a6:	4252      	negs	r2, r2
 80054a8:	61a2      	str	r2, [r4, #24]
 80054aa:	6922      	ldr	r2, [r4, #16]
 80054ac:	b942      	cbnz	r2, 80054c0 <__swsetup_r+0xa4>
 80054ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054b2:	d1c5      	bne.n	8005440 <__swsetup_r+0x24>
 80054b4:	bd38      	pop	{r3, r4, r5, pc}
 80054b6:	0799      	lsls	r1, r3, #30
 80054b8:	bf58      	it	pl
 80054ba:	6962      	ldrpl	r2, [r4, #20]
 80054bc:	60a2      	str	r2, [r4, #8]
 80054be:	e7f4      	b.n	80054aa <__swsetup_r+0x8e>
 80054c0:	2000      	movs	r0, #0
 80054c2:	e7f7      	b.n	80054b4 <__swsetup_r+0x98>
 80054c4:	20000018 	.word	0x20000018

080054c8 <_raise_r>:
 80054c8:	291f      	cmp	r1, #31
 80054ca:	b538      	push	{r3, r4, r5, lr}
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	d904      	bls.n	80054dc <_raise_r+0x14>
 80054d2:	2316      	movs	r3, #22
 80054d4:	6003      	str	r3, [r0, #0]
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80054de:	b112      	cbz	r2, 80054e6 <_raise_r+0x1e>
 80054e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054e4:	b94b      	cbnz	r3, 80054fa <_raise_r+0x32>
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 f830 	bl	800554c <_getpid_r>
 80054ec:	4622      	mov	r2, r4
 80054ee:	4601      	mov	r1, r0
 80054f0:	4628      	mov	r0, r5
 80054f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f6:	f000 b817 	b.w	8005528 <_kill_r>
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d00a      	beq.n	8005514 <_raise_r+0x4c>
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	d103      	bne.n	800550a <_raise_r+0x42>
 8005502:	2316      	movs	r3, #22
 8005504:	6003      	str	r3, [r0, #0]
 8005506:	2001      	movs	r0, #1
 8005508:	e7e7      	b.n	80054da <_raise_r+0x12>
 800550a:	2100      	movs	r1, #0
 800550c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005510:	4620      	mov	r0, r4
 8005512:	4798      	blx	r3
 8005514:	2000      	movs	r0, #0
 8005516:	e7e0      	b.n	80054da <_raise_r+0x12>

08005518 <raise>:
 8005518:	4b02      	ldr	r3, [pc, #8]	@ (8005524 <raise+0xc>)
 800551a:	4601      	mov	r1, r0
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	f7ff bfd3 	b.w	80054c8 <_raise_r>
 8005522:	bf00      	nop
 8005524:	20000018 	.word	0x20000018

08005528 <_kill_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d07      	ldr	r5, [pc, #28]	@ (8005548 <_kill_r+0x20>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	f7fb ff15 	bl	8001364 <_kill>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	d102      	bne.n	8005544 <_kill_r+0x1c>
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	b103      	cbz	r3, 8005544 <_kill_r+0x1c>
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	bd38      	pop	{r3, r4, r5, pc}
 8005546:	bf00      	nop
 8005548:	20000388 	.word	0x20000388

0800554c <_getpid_r>:
 800554c:	f7fb bf02 	b.w	8001354 <_getpid>

08005550 <__swhatbuf_r>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	460c      	mov	r4, r1
 8005554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005558:	2900      	cmp	r1, #0
 800555a:	b096      	sub	sp, #88	@ 0x58
 800555c:	4615      	mov	r5, r2
 800555e:	461e      	mov	r6, r3
 8005560:	da0d      	bge.n	800557e <__swhatbuf_r+0x2e>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005568:	f04f 0100 	mov.w	r1, #0
 800556c:	bf14      	ite	ne
 800556e:	2340      	movne	r3, #64	@ 0x40
 8005570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005574:	2000      	movs	r0, #0
 8005576:	6031      	str	r1, [r6, #0]
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	b016      	add	sp, #88	@ 0x58
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	466a      	mov	r2, sp
 8005580:	f000 f848 	bl	8005614 <_fstat_r>
 8005584:	2800      	cmp	r0, #0
 8005586:	dbec      	blt.n	8005562 <__swhatbuf_r+0x12>
 8005588:	9901      	ldr	r1, [sp, #4]
 800558a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800558e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005592:	4259      	negs	r1, r3
 8005594:	4159      	adcs	r1, r3
 8005596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559a:	e7eb      	b.n	8005574 <__swhatbuf_r+0x24>

0800559c <__smakebuf_r>:
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a0:	079d      	lsls	r5, r3, #30
 80055a2:	4606      	mov	r6, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	d507      	bpl.n	80055b8 <__smakebuf_r+0x1c>
 80055a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	2301      	movs	r3, #1
 80055b2:	6163      	str	r3, [r4, #20]
 80055b4:	b003      	add	sp, #12
 80055b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b8:	ab01      	add	r3, sp, #4
 80055ba:	466a      	mov	r2, sp
 80055bc:	f7ff ffc8 	bl	8005550 <__swhatbuf_r>
 80055c0:	9f00      	ldr	r7, [sp, #0]
 80055c2:	4605      	mov	r5, r0
 80055c4:	4639      	mov	r1, r7
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff f86e 	bl	80046a8 <_malloc_r>
 80055cc:	b948      	cbnz	r0, 80055e2 <__smakebuf_r+0x46>
 80055ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d2:	059a      	lsls	r2, r3, #22
 80055d4:	d4ee      	bmi.n	80055b4 <__smakebuf_r+0x18>
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	f043 0302 	orr.w	r3, r3, #2
 80055de:	81a3      	strh	r3, [r4, #12]
 80055e0:	e7e2      	b.n	80055a8 <__smakebuf_r+0xc>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	6020      	str	r0, [r4, #0]
 80055e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055f2:	b15b      	cbz	r3, 800560c <__smakebuf_r+0x70>
 80055f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f81d 	bl	8005638 <_isatty_r>
 80055fe:	b128      	cbz	r0, 800560c <__smakebuf_r+0x70>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	431d      	orrs	r5, r3
 8005610:	81a5      	strh	r5, [r4, #12]
 8005612:	e7cf      	b.n	80055b4 <__smakebuf_r+0x18>

08005614 <_fstat_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	@ (8005634 <_fstat_r+0x20>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	4611      	mov	r1, r2
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	f7fb feff 	bl	8001424 <_fstat>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d102      	bne.n	8005630 <_fstat_r+0x1c>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b103      	cbz	r3, 8005630 <_fstat_r+0x1c>
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	bd38      	pop	{r3, r4, r5, pc}
 8005632:	bf00      	nop
 8005634:	20000388 	.word	0x20000388

08005638 <_isatty_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d06      	ldr	r5, [pc, #24]	@ (8005654 <_isatty_r+0x1c>)
 800563c:	2300      	movs	r3, #0
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fb fefe 	bl	8001444 <_isatty>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_isatty_r+0x1a>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_isatty_r+0x1a>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	20000388 	.word	0x20000388

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
